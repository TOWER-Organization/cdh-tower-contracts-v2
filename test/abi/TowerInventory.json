{
  "address": "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "InternalMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "SetSigner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "VerifiedMint",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE_ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_tokenIds",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_amounts",
          "type": "uint256[][]"
        }
      ],
      "name": "batchMintMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "checkVerification",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "seedNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenTypeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenTypeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setTokenTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenTypeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenTypeName",
          "type": "string"
        }
      ],
      "name": "updateTokenTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "verifyAndMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc4d669f898d3b9c3dab9ce5f7172a9fd46ae05f7e3ce0f1f249ef3bf33156c1e",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
    "transactionIndex": 0,
    "gasUsed": "4016549",
    "logsBloom": "0x
    "blockHash": "0x86f0a6fe36666ccaf908fe30e148e86121e8cc740ecd565c465a17724ea12992",
    "transactionHash": "0xc4d669f898d3b9c3dab9ce5f7172a9fd46ae05f7e3ce0f1f249ef3bf33156c1e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xc4d669f898d3b9c3dab9ce5f7172a9fd46ae05f7e3ce0f1f249ef3bf33156c1e",
        "address": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x86f0a6fe36666ccaf908fe30e148e86121e8cc740ecd565c465a17724ea12992"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xc4d669f898d3b9c3dab9ce5f7172a9fd46ae05f7e3ce0f1f249ef3bf33156c1e",
        "address": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x11c2020b6b4f4e00c2410234e0c72636b4739cf7cda4d8e24ef6b881350e6704",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x86f0a6fe36666ccaf908fe30e148e86121e8cc740ecd565c465a17724ea12992"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xc4d669f898d3b9c3dab9ce5f7172a9fd46ae05f7e3ce0f1f249ef3bf33156c1e",
        "address": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x86f0a6fe36666ccaf908fe30e148e86121e8cc740ecd565c465a17724ea12992"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xc4d669f898d3b9c3dab9ce5f7172a9fd46ae05f7e3ce0f1f249ef3bf33156c1e",
        "address": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x86f0a6fe36666ccaf908fe30e148e86121e8cc740ecd565c465a17724ea12992"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "4016549",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "TOWER Inventory",
    "TOWER-I",
    "0x41bff127e5984adff500896023345b1e45a33688",
    "https://animocabrands.mypinata.cloud/ipfs/QmSRyar1wKWniPRzr5ubRMatpdpYhPFLXYS8SYW4deMhD8/"
  ],
  "numDeployments": 1,
  "solcInputHash": "b9b08d4d7ef5ef876839ca75df813995",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"InternalMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"SetSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"VerifiedMint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_tokenIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_amounts\",\"type\":\"uint256[][]\"}],\"name\":\"batchMintMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"checkVerification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seedNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenTypeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenTypeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenTypeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenTypeName\",\"type\":\"string\"}],\"name\":\"updateTokenTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifyAndMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/ERC1155/TowerInventory.sol\":\"TowerInventory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x74216d303b87202736b6d571fc3e9b530aa98ff017a41516170f1c555e518669\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdad22b949de979bb2ad9001c044b2aeaacf8a25e3de09ed6f022a9469f936d5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/token/ERC1155/InventoryAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract InventoryAccessControl is AccessControl {\\n    bytes32 public constant MINTER_ROLE = 0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6; // keccak256(abi.encodePacked(\\\"MINTER_ROLE\\\"));\\n    bytes32 public constant MINTER_ROLE_ADMIN = 0x11c2020b6b4f4e00c2410234e0c72636b4739cf7cda4d8e24ef6b881350e6704; //keccak256(abi.encodePacked(\\\"MINTER_ROLE_ADMIN\\\"));\\n    bytes32 public constant MANAGER_ROLE = 0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08; // keccak256(abi.encodePacked(\\\"MANAGER_ROLE\\\"));\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()));\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(hasRole(MINTER_ROLE, _msgSender()));\\n        _;\\n    }\\n\\n    modifier onlyMinterAdmin() {\\n        require(hasRole(MINTER_ROLE_ADMIN, _msgSender()));\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(hasRole(MANAGER_ROLE, _msgSender()));\\n        _;\\n    }\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(MINTER_ROLE_ADMIN, _msgSender());\\n        _setupRole(MANAGER_ROLE, _msgSender());\\n        _setupRole(MINTER_ROLE, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x6c4c19ec925d57e7cbb9ff671b4f7e0f8e7ef81f853331110eb11a90daaf7229\",\"license\":\"MIT\"},\"contracts/token/ERC1155/TowerInventory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./InventoryAccessControl.sol\\\";\\n\\n/*\\n * @title TowerInventory\\n * @dev This contract is used to manage the inventory of the tower related NFTs.\\n */\\ncontract TowerInventory is ERC1155Pausable, InventoryAccessControl {\\n    using ECDSA for bytes32;\\n\\n    string public name;\\n    string public symbol;\\n\\n    // EOA to verify the signature for minting tokens\\n    address public signer;\\n    // seed nonce while process minting tokens\\n    mapping(address => uint256) public seedNonce;\\n\\n    mapping(uint256 => string) public tokenTypes; //  token type id => token type name\\n\\n    /*\\n     * Events emitted by the contract for operations\\n     */\\n    event SetSigner(address indexed _signer, uint256 _blockTimestamp);\\n    event VerifiedMint(address indexed _sender, uint256[] _tokenIds, uint256[] _amounts);\\n    event InternalMint(address indexed _to, uint256[] _tokenIds, uint256[] _amounts);\\n\\n    /*\\n     * Set signer that verifies the signature for minting tokens\\n     * @param _signer EOA to verify the signature for minting tokens\\n     */\\n    function setSigner(address _signer) external onlyAdmin {\\n        signer = _signer;\\n        emit SetSigner(_signer, block.timestamp);\\n    }\\n\\n    /*\\n     * Get signer in the contract\\n     */\\n    function getSigner() external view onlyAdmin returns (address) {\\n        return signer;\\n    }\\n\\n    /* Set base URL for the token metadata\\n     * Note: Only admin or manager can call this function.\\n     * @param _baseUrl Base URL for the token metadata\\n     */\\n    function setBaseUri(string memory _uri) external onlyAdmin onlyManager {\\n        _setURI(_uri);\\n    }\\n\\n    /*\\n     * get url address for the type of token based on tokenId\\n     * @param _tokenId: token id to get the url address\\n     * @returns url address for the type of token based on tokenId\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenUri = super.uri(tokenId);\\n        string memory tokenIdString = tokenTypes[tokenId];\\n        return string(abi.encodePacked(tokenUri, tokenIdString, \\\".json\\\"));\\n    }\\n\\n    /*\\n     * Set token type name for the token type ID\\n     * Note: Only admin or manager can call this function.\\n     * @param _tokenTypeId: token type id to set the token type name\\n     * @param _tokenTypeName: token type name to set for the token type id\\n     */\\n    function setTokenTypes(\\n        uint256 _tokenTypeId,\\n        string memory _tokenTypeName,\\n        string memory _uri\\n    ) external onlyAdmin onlyManager {\\n        _setURI(_uri);\\n        setOnlyTokenTypes(_tokenTypeId, _tokenTypeName);\\n    }\\n\\n    function setOnlyTokenTypes(uint256 _tokenTypeId, string memory _tokenTypeName) internal {\\n        require(bytes(tokenTypes[_tokenTypeId]).length == 0, \\\"Token Type already exists\\\");\\n        _setTokenTypes(_tokenTypeId, _tokenTypeName);\\n    }\\n\\n    function updateTokenTypes(uint256 _tokenTypeId, string memory _tokenTypeName) external onlyAdmin onlyManager {\\n        require(bytes(tokenTypes[_tokenTypeId]).length > 0, \\\"Token Type already exists\\\");\\n        _setTokenTypes(_tokenTypeId, _tokenTypeName);\\n    }\\n\\n    function _setTokenTypes(uint256 _tokenTypeId, string memory _tokenTypeName) internal {\\n        tokenTypes[_tokenTypeId] = _tokenTypeName;\\n    }\\n\\n    /*\\n     * Check if the call has valid signature generated from the signer\\n     * @param _tokenIds: token ids\\n     * @param _amounts: amounts of tokens to be minted\\n     * @param _sender: sender of the call\\n     * @param _signature: signature generated from the signer\\n     *\\n     * @returns true if the call has valid signature generated from the signer\\n     */\\n    function checkVerification(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _amounts,\\n        address _sender,\\n        bytes memory _signature\\n    ) public view returns (bool) {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            require(bytes(tokenTypes[_tokenIds[i]]).length > 0, \\\"Token Type does not exist\\\");\\n        }\\n\\n        uint256 nonce = seedNonce[_sender];\\n        bytes32 hash = keccak256(abi.encodePacked(_sender, _tokenIds, _amounts, nonce));\\n        require(hash.toEthSignedMessageHash().recover(_signature) == signer, \\\"Invalid Signature\\\");\\n        return true;\\n    }\\n\\n    /*\\n     * Batch mint tokens if minting is not done through backend verified signature\\n     * Note: Only minter or minter admin can mint\\n     * @param _tokenIds: token ids\\n     * @param _amounts: amounts of tokens to be minted\\n     * @param _sender: sender of the call\\n     *\\n     * @emit InternalMint: emit event when minting tokens\\n     */\\n    function batchMint(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _amounts,\\n        address _to\\n    ) external onlyMinter onlyMinterAdmin {\\n        _mintBatch(_to, _tokenIds, _amounts, \\\"0x\\\");\\n        emit InternalMint(_to, _tokenIds, _amounts);\\n    }\\n\\n    /*\\n     * Batch mint tokens with specified amount to destination addresses\\n     * Note: Only minter or minter admin can mint\\n     * @param _to: receivers of the minted tokens\\n     * @param _tokenIds: token ids\\n     * @param _amounts: amounts of tokens to be minted\\n     *\\n     * @emit InternalMint: emit event when minting tokens\\n     */\\n    function batchMintMultiple(\\n        address[] memory _to,\\n        uint256[][] memory _tokenIds,\\n        uint256[][] memory _amounts\\n    ) external onlyMinter onlyMinterAdmin {\\n        for (uint256 i = 0; i < _to.length; i++) {\\n            _mintBatch(_to[i], _tokenIds[i], _amounts[i], \\\"0x\\\");\\n            emit InternalMint(_to[i], _tokenIds[i], _amounts[i]);\\n        }\\n    }\\n\\n    /*\\n     * Verify and mint the tokens based on the signature generated from backend\\n     * @param _tokenIds: token ids\\n     * @param _amounts: amounts of tokens to be minted\\n     * @param _sender: sender of the call\\n     * @param _signature: signature generated by the signer from backend\\n     */\\n    function verifyAndMint(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _amounts,\\n        address _sender,\\n        bytes memory _signature\\n    ) external whenNotPaused {\\n        require(checkVerification(_tokenIds, _amounts, _sender, _signature));\\n\\n        seedNonce[_sender]++;\\n        if (_tokenIds.length > 1) {\\n            _mintBatch(_sender, _tokenIds, _amounts, \\\"0x\\\");\\n        } else {\\n            _mint(_sender, _tokenIds[0], _amounts[0], \\\"0x\\\");\\n        }\\n        emit VerifiedMint(_sender, _tokenIds, _amounts);\\n    }\\n\\n    /* Pause the contract from minting or transfers\\n     * Note: Only admin or manager can call this function when not paused\\n     */\\n    function pause() external onlyAdmin onlyManager whenNotPaused {\\n        _pause();\\n    }\\n\\n    /* Unpause the contract from minting or transfers\\n     * Note: Only admin or manager can call this function when paused\\n     */\\n    function unpause() external onlyAdmin onlyManager whenPaused {\\n        _unpause();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /*\\n     * Constructor of the contract\\n     * @param _uri: base url for the token metadata\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _signer,\\n        string memory _uri\\n    ) ERC1155(_uri) InventoryAccessControl() {\\n        name = _name;\\n        symbol = _symbol;\\n        signer = _signer;\\n\\n        _setTokenTypes(1, \\\"gold-ticket\\\");\\n        _setTokenTypes(2, \\\"silver-ticket\\\");\\n        _setTokenTypes(3, \\\"bronze-ticket\\\");\\n        _setTokenTypes(4, \\\"miraculous-angel-female\\\");\\n        _setTokenTypes(5, \\\"divine-champion-male\\\");\\n        _setTokenTypes(6, \\\"sparkling-fairy-female\\\");\\n        _setTokenTypes(7, \\\"arch-mage-male\\\");\\n        _setTokenTypes(8, \\\"fantasy-healer-female\\\");\\n        _setTokenTypes(9, \\\"magical-warrior-male\\\");\\n        _setTokenTypes(10, \\\"assassin-male\\\");\\n        _setTokenTypes(11, \\\"assassin-female\\\");\\n        _setTokenTypes(12, \\\"captain-female\\\");\\n        _setTokenTypes(13, \\\"captain-male\\\");\\n        _setTokenTypes(14, \\\"soldier-female\\\");\\n        _setTokenTypes(15, \\\"solider-male\\\");\\n        _setTokenTypes(16, \\\"rouge-female\\\");\\n        _setTokenTypes(17, \\\"rouge-male\\\");\\n        _setTokenTypes(18, \\\"bard-female\\\");\\n        _setTokenTypes(19, \\\"bard-male\\\");\\n        _setTokenTypes(20, \\\"phantom-queen-female\\\");\\n        _setTokenTypes(21, \\\"soul-harvester-male\\\");\\n        _setTokenTypes(22, \\\"map-common\\\");\\n        _setTokenTypes(23, \\\"map-rare\\\");\\n        _setTokenTypes(24, \\\"map-epic\\\");\\n        _setTokenTypes(25, \\\"map-legendary\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x289746af6f7ee3560435dd72532753d9f5dbec0ab83eedeb9baa4ee90d96b689\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200427b3803806200427b83398101604081905262000034916200094b565b806200004081620006e9565b506003805460ff191690556200005860003362000702565b620000847f11c2020b6b4f4e00c2410234e0c72636b4739cf7cda4d8e24ef6b881350e67043362000702565b620000b07f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083362000702565b620000dc7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63362000702565b8351620000f1906005906020870190620007d8565b50825162000107906006906020860190620007d8565b50600780546001600160a01b0319166001600160a01b03841617905560408051808201909152600b81526a19dbdb190b5d1a58dad95d60aa1b602082015262000153906001906200070e565b6200018b60026040518060400160405280600d81526020016c1cda5b1d995c8b5d1a58dad95d609a1b8152506200070e60201b60201c565b620001c360036040518060400160405280600d81526020016c189c9bdb9e994b5d1a58dad95d609a1b8152506200070e60201b60201c565b6200020b60046040518060400160405280601781526020017f6d69726163756c6f75732d616e67656c2d66656d616c650000000000000000008152506200070e60201b60201c565b6200025360056040518060400160405280601481526020017f646976696e652d6368616d70696f6e2d6d616c650000000000000000000000008152506200070e60201b60201c565b6200029b60066040518060400160405280601681526020017f737061726b6c696e672d66616972792d66656d616c65000000000000000000008152506200070e60201b60201c565b620002d460076040518060400160405280600e81526020016d617263682d6d6167652d6d616c6560901b8152506200070e60201b60201c565b6200031c60086040518060400160405280601581526020017f66616e746173792d6865616c65722d66656d616c6500000000000000000000008152506200070e60201b60201c565b6200036460096040518060400160405280601481526020017f6d61676963616c2d77617272696f722d6d616c650000000000000000000000008152506200070e60201b60201c565b6200039c600a6040518060400160405280600d81526020016c617373617373696e2d6d616c6560981b8152506200070e60201b60201c565b620003d6600b6040518060400160405280600f81526020016e617373617373696e2d66656d616c6560881b8152506200070e60201b60201c565b6200040f600c6040518060400160405280600e81526020016d6361707461696e2d66656d616c6560901b8152506200070e60201b60201c565b62000446600d6040518060400160405280600c81526020016b6361707461696e2d6d616c6560a01b8152506200070e60201b60201c565b60408051808201909152600e8082526d736f6c646965722d66656d616c6560901b602083015262000477916200070e565b620004ae600f6040518060400160405280600c81526020016b736f6c696465722d6d616c6560a01b8152506200070e60201b60201c565b620004e560106040518060400160405280600c81526020016b726f7567652d66656d616c6560a01b8152506200070e60201b60201c565b6200051a60116040518060400160405280600a815260200169726f7567652d6d616c6560b01b8152506200070e60201b60201c565b6200055060126040518060400160405280600b81526020016a626172642d66656d616c6560a81b8152506200070e60201b60201c565b62000584601360405180604001604052806009815260200168626172642d6d616c6560b81b8152506200070e60201b60201c565b6040805180820190915260148082527f7068616e746f6d2d717565656e2d66656d616c650000000000000000000000006020830152620005c4916200070e565b6200060c60156040518060400160405280601381526020017f736f756c2d6861727665737465722d6d616c65000000000000000000000000008152506200070e60201b60201c565b6200064160166040518060400160405280600a81526020016936b0b816b1b7b6b6b7b760b11b8152506200070e60201b60201c565b620006746017604051806040016040528060088152602001676d61702d7261726560c01b8152506200070e60201b60201c565b620006a76018604051806040016040528060088152602001676d61702d6570696360c01b8152506200070e60201b60201c565b620006df60196040518060400160405280600d81526020016c6d61702d6c6567656e6461727960981b8152506200070e60201b60201c565b5050505062000a3a565b8051620006fe906002906020840190620007d8565b5050565b620006fe828262000734565b600082815260096020908152604090912082516200072f92840190620007d8565b505050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16620006fe5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620007943390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b828054620007e690620009fe565b90600052602060002090601f0160209004810192826200080a576000855562000855565b82601f106200082557805160ff191683800117855562000855565b8280016001018555821562000855579182015b828111156200085557825182559160200191906001019062000838565b506200086392915062000867565b5090565b5b8082111562000863576000815560010162000868565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620008a657600080fd5b81516001600160401b0380821115620008c357620008c36200087e565b604051601f8301601f19908116603f01168101908282118183101715620008ee57620008ee6200087e565b816040528381526020925086838588010111156200090b57600080fd5b600091505b838210156200092f578582018301518183018401529082019062000910565b83821115620009415760008385830101525b9695505050505050565b600080600080608085870312156200096257600080fd5b84516001600160401b03808211156200097a57600080fd5b620009888883890162000894565b955060208701519150808211156200099f57600080fd5b620009ad8883890162000894565b604088015190955091506001600160a01b0382168214620009cd57600080fd5b606087015191935080821115620009e357600080fd5b50620009f28782880162000894565b91505092959194509250565b600181811c9082168062000a1357607f821691505b60208210810362000a3457634e487b7160e01b600052602260045260246000fd5b50919050565b6138318062000a4a6000396000f3fe608060405234801561001057600080fd5b50600436106102255760003560e01c8063784923c51161012a578063a217fddf116100bd578063e985e9c51161008c578063ef99e27e11610071578063ef99e27e1461052c578063f242432a1461053f578063fb34b2011461055257600080fd5b8063e985e9c5146104c9578063ec87621c1461050557600080fd5b8063a217fddf14610474578063a22cb4651461047c578063d53913931461048f578063d547741f146104b657600080fd5b806391d14854116100f957806391d148541461040d578063924e893f1461044657806395d89b4114610459578063a0bcfc7f1461046157600080fd5b8063784923c5146103ca5780637ac3c02f146103ea5780638054c9c3146103f25780638456cb591461040557600080fd5b80632f2ff15d116101bd5780633f4ba83a1161018c5780635c975abb116101715780635c975abb1461039957806369582851146103a45780636c19e783146103b757600080fd5b80633f4ba83a146103715780634e1273f41461037957600080fd5b80632f2ff15d1461032557806333f6832a1461033857806336568abe1461034b5780633b616ef51461035e57600080fd5b806311d15e7a116101f957806311d15e7a1461029b578063238ac933146102c2578063248a9ca3146102ed5780632eb2c2d61461031057600080fd5b8062fdd58e1461022a57806301ffc9a71461025057806306fdde03146102735780630e89341c14610288575b600080fd5b61023d610238366004612c17565b610565565b6040519081526020015b60405180910390f35b61026361025e366004612c57565b61060e565b6040519015158152602001610247565b61027b61061f565b6040516102479190612ccc565b61027b610296366004612cdf565b6106ad565b61023d7f11c2020b6b4f4e00c2410234e0c72636b4739cf7cda4d8e24ef6b881350e670481565b6007546102d5906001600160a01b031681565b6040516001600160a01b039091168152602001610247565b61023d6102fb366004612cdf565b60009081526004602052604090206001015490565b61032361031e366004612e44565b610783565b005b610323610333366004612eee565b610825565b61027b610346366004612cdf565b61084f565b610323610359366004612eee565b610868565b61032361036c366004612f1a565b6108f4565b610323610a5d565b61038c610387366004613020565b610b00565b60405161024791906130bf565b60035460ff16610263565b6102636103b2366004612f1a565b610c3e565b6103236103c53660046130d2565b610e04565b61023d6103d83660046130d2565b60086020526000908152604090205481565b6102d5610e84565b610323610400366004613178565b610eaa565b610323611033565b61026361041b366004612eee565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610323610454366004613200565b6110d5565b61027b61118e565b61032361046f36600461323d565b61119b565b61023d600081565b61032361048a36600461327a565b6111ee565b61023d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6103236104c4366004612eee565b6111f9565b6102636104d73660046132b6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61023d7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b61032361053a3660046132e0565b61121e565b61032361054d366004613343565b611278565b6103236105603660046133a8565b611313565b60006001600160a01b0383166105e85760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b6000610619826113e7565b92915050565b6005805461062c9061341c565b80601f01602080910402602001604051908101604052809291908181526020018280546106589061341c565b80156106a55780601f1061067a576101008083540402835291602001916106a5565b820191906000526020600020905b81548152906001019060200180831161068857829003601f168201915b505050505081565b606060006106ba83611425565b6000848152600960205260408120805492935090916106d89061341c565b80601f01602080910402602001604051908101604052809291908181526020018280546107049061341c565b80156107515780601f1061072657610100808354040283529160200191610751565b820191906000526020600020905b81548152906001019060200180831161073457829003601f168201915b50505050509050818160405160200161076b929190613456565b60405160208183030381529060405292505050919050565b6001600160a01b03851633148061079f575061079f85336104d7565b6108115760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016105df565b61081e85858585856114b9565b5050505050565b60008281526004602052604090206001015461084081611765565b61084a838361176f565b505050565b6009602052600090815260409020805461062c9061341c565b6001600160a01b03811633146108e65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016105df565b6108f08282611811565b5050565b60035460ff16156109475760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016105df565b61095384848484610c3e565b61095c57600080fd5b6001600160a01b0382166000908152600860205260408120805491610980836134c3565b91905055506001845111156109ba576109b582858560405180604001604052806002815260200161060f60f31b815250611894565b610a14565b610a1482856000815181106109d1576109d16134dd565b6020026020010151856000815181106109ec576109ec6134dd565b602002602001015160405180604001604052806002815260200161060f60f31b815250611a9a565b816001600160a01b03167f37b39792f8a64e7bbbfdd0b29dcb99abf5dcf3b568c3632afdc8f083a000bb918585604051610a4f9291906134f3565b60405180910390a250505050565b610a6860003361041b565b610a7157600080fd5b610a9b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083361041b565b610aa457600080fd5b60035460ff16610af65760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016105df565b610afe611bd9565b565b60608151835114610b795760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016105df565b6000835167ffffffffffffffff811115610b9557610b95612cf8565b604051908082528060200260200182016040528015610bbe578160200160208202803683370190505b50905060005b8451811015610c3657610c09858281518110610be257610be26134dd565b6020026020010151858381518110610bfc57610bfc6134dd565b6020026020010151610565565b828281518110610c1b57610c1b6134dd565b6020908102919091010152610c2f816134c3565b9050610bc4565b509392505050565b6000805b8551811015610ce557600060096000888481518110610c6357610c636134dd565b602002602001015181526020019081526020016000208054610c849061341c565b905011610cd35760405162461bcd60e51b815260206004820152601960248201527f546f6b656e205479706520646f6573206e6f742065786973740000000000000060448201526064016105df565b80610cdd816134c3565b915050610c42565b506001600160a01b0383166000908152600860209081526040808320549051909291610d199187918a918a91879101613546565b60408051601f1981840301815291905280516020909101206007549091506001600160a01b0316610da185610d9b846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90611c75565b6001600160a01b031614610df75760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964205369676e617475726500000000000000000000000000000060448201526064016105df565b5060019695505050505050565b610e0f60003361041b565b610e1857600080fd5b600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040514281527f0174dd4916f0687a126f674eb9695b701ccfc94d9075cfc4a3b33dd79e4c0a769060200160405180910390a250565b6000610e90813361041b565b610e9957600080fd5b506007546001600160a01b03165b90565b610ed47f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63361041b565b610edd57600080fd5b610f077f11c2020b6b4f4e00c2410234e0c72636b4739cf7cda4d8e24ef6b881350e67043361041b565b610f1057600080fd5b60005b835181101561102d57610f8d848281518110610f3157610f316134dd565b6020026020010151848381518110610f4b57610f4b6134dd565b6020026020010151848481518110610f6557610f656134dd565b602002602001015160405180604001604052806002815260200161060f60f31b815250611894565b838181518110610f9f57610f9f6134dd565b60200260200101516001600160a01b03167ff70f4695b2833377e7353b1b9528346d0dde56ac9474f791c6bbf8d56c932a19848381518110610fe357610fe36134dd565b6020026020010151848481518110610ffd57610ffd6134dd565b60200260200101516040516110139291906134f3565b60405180910390a280611025816134c3565b915050610f13565b50505050565b61103e60003361041b565b61104757600080fd5b6110717f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083361041b565b61107a57600080fd5b60035460ff16156110cd5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016105df565b610afe611c91565b6110e060003361041b565b6110e957600080fd5b6111137f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083361041b565b61111c57600080fd5b600082815260096020526040812080546111359061341c565b9050116111845760405162461bcd60e51b815260206004820152601960248201527f546f6b656e205479706520616c7265616479206578697374730000000000000060448201526064016105df565b6108f08282611d19565b6006805461062c9061341c565b6111a660003361041b565b6111af57600080fd5b6111d97f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083361041b565b6111e257600080fd5b6111eb81611d38565b50565b6108f0338383611d4b565b60008281526004602052604090206001015461121481611765565b61084a8383611811565b61122960003361041b565b61123257600080fd5b61125c7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083361041b565b61126557600080fd5b61126e81611d38565b61084a8383611e3f565b6001600160a01b038516331480611294575061129485336104d7565b6113065760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f766564000000000000000000000000000000000000000000000060648201526084016105df565b61081e8585858585611ea7565b61133d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63361041b565b61134657600080fd5b6113707f11c2020b6b4f4e00c2410234e0c72636b4739cf7cda4d8e24ef6b881350e67043361041b565b61137957600080fd5b61139f81848460405180604001604052806002815260200161060f60f31b815250611894565b806001600160a01b03167ff70f4695b2833377e7353b1b9528346d0dde56ac9474f791c6bbf8d56c932a1984846040516113da9291906134f3565b60405180910390a2505050565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061061957506106198261208b565b6060600280546114349061341c565b80601f01602080910402602001604051908101604052809291908181526020018280546114609061341c565b80156114ad5780601f10611482576101008083540402835291602001916114ad565b820191906000526020600020905b81548152906001019060200180831161149057829003601f168201915b50505050509050919050565b81518351146115305760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d6174636800000000000000000000000000000000000000000000000060648201526084016105df565b6001600160a01b0384166115ac5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016105df565b336115bb818787878787612126565b60005b84518110156116f75760008582815181106115db576115db6134dd565b6020026020010151905060008583815181106115f9576115f96134dd565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561169f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016105df565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906116dc908490613595565b92505081905550505050806116f0906134c3565b90506115be565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117479291906134f3565b60405180910390a461175d81878787878761219f565b505050505050565b6111eb813361238b565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff166108f05760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117cd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16156108f05760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0384166119105760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016105df565b81518351146119875760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d6174636800000000000000000000000000000000000000000000000060648201526084016105df565b3361199781600087878787612126565b60005b8451811015611a32578381815181106119b5576119b56134dd565b60200260200101516000808784815181106119d2576119d26134dd565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611a1a9190613595565b90915550819050611a2a816134c3565b91505061199a565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a839291906134f3565b60405180910390a461081e8160008787878761219f565b6001600160a01b038416611b165760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016105df565b336000611b228561240b565b90506000611b2f8561240b565b9050611b4083600089858589612126565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290611b70908490613595565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611bd083600089898989612456565b50505050505050565b60035460ff16611c2b5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016105df565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000806000611c848585612599565b91509150610c3681612607565b60035460ff1615611ce45760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016105df565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c583390565b6000828152600960209081526040909120825161084a92840190612b62565b80516108f0906002906020840190612b62565b816001600160a01b0316836001600160a01b031603611dd25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016105df565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60008281526009602052604090208054611e589061341c565b1590506111845760405162461bcd60e51b815260206004820152601960248201527f546f6b656e205479706520616c7265616479206578697374730000000000000060448201526064016105df565b6001600160a01b038416611f235760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016105df565b336000611f2f8561240b565b90506000611f3c8561240b565b9050611f4c838989858589612126565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015611fe35760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016105df565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612020908490613595565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612080848a8a8a8a8a612456565b505050505050505050565b60006001600160e01b031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806120ee57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061061957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610619565b60035460ff161561175d5760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201527f7768696c6520706175736564000000000000000000000000000000000000000060648201526084016105df565b6001600160a01b0384163b1561175d576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c81906121fc90899089908890889088906004016135ad565b6020604051808303816000875af1925050508015612237575060408051601f3d908101601f191682019092526122349181019061360b565b60015b6122ec57612243613628565b806308c379a00361227c5750612257613643565b80612262575061227e565b8060405162461bcd60e51b81526004016105df9190612ccc565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016105df565b6001600160e01b031981167fbc197c810000000000000000000000000000000000000000000000000000000014611bd05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016105df565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff166108f0576123c9816001600160a01b031660146127f3565b6123d48360206127f3565b6040516020016123e59291906136eb565b60408051601f198184030181529082905262461bcd60e51b82526105df91600401612ccc565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612445576124456134dd565b602090810291909101015292915050565b6001600160a01b0384163b1561175d576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e61906124b3908990899088908890889060040161376c565b6020604051808303816000875af19250505080156124ee575060408051601f3d908101601f191682019092526124eb9181019061360b565b60015b6124fa57612243613628565b6001600160e01b031981167ff23a6e610000000000000000000000000000000000000000000000000000000014611bd05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016105df565b60008082516041036125cf5760208301516040840151606085015160001a6125c387828585612a23565b94509450505050612600565b82516040036125f857602083015160408401516125ed868383612b10565b935093505050612600565b506000905060025b9250929050565b600081600481111561261b5761261b6137af565b036126235750565b6001816004811115612637576126376137af565b036126845760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105df565b6002816004811115612698576126986137af565b036126e55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105df565b60038160048111156126f9576126f96137af565b0361276c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016105df565b6004816004811115612780576127806137af565b036111eb5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016105df565b606060006128028360026137c5565b61280d906002613595565b67ffffffffffffffff81111561282557612825612cf8565b6040519080825280601f01601f19166020018201604052801561284f576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612886576128866134dd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106128e9576128e96134dd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006129258460026137c5565b612930906001613595565b90505b60018111156129cd577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612971576129716134dd565b1a60f81b828281518110612987576129876134dd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936129c6816137e4565b9050612933565b508315612a1c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105df565b9392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a5a5750600090506003612b07565b8460ff16601b14158015612a7257508460ff16601c14155b15612a835750600090506004612b07565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612ad7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b0057600060019250925050612b07565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681612b4660ff86901c601b613595565b9050612b5487828885612a23565b935093505050935093915050565b828054612b6e9061341c565b90600052602060002090601f016020900481019282612b905760008555612bd6565b82601f10612ba957805160ff1916838001178555612bd6565b82800160010185558215612bd6579182015b82811115612bd6578251825591602001919060010190612bbb565b50612be2929150612be6565b5090565b5b80821115612be25760008155600101612be7565b80356001600160a01b0381168114612c1257600080fd5b919050565b60008060408385031215612c2a57600080fd5b612c3383612bfb565b946020939093013593505050565b6001600160e01b0319811681146111eb57600080fd5b600060208284031215612c6957600080fd5b8135612a1c81612c41565b60005b83811015612c8f578181015183820152602001612c77565b8381111561102d5750506000910152565b60008151808452612cb8816020860160208601612c74565b601f01601f19169290920160200192915050565b602081526000612a1c6020830184612ca0565b600060208284031215612cf157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715612d3457612d34612cf8565b6040525050565b600067ffffffffffffffff821115612d5557612d55612cf8565b5060051b60200190565b600082601f830112612d7057600080fd5b81356020612d7d82612d3b565b604051612d8a8282612d0e565b83815260059390931b8501820192828101915086841115612daa57600080fd5b8286015b84811015612dc55780358352918301918301612dae565b509695505050505050565b600082601f830112612de157600080fd5b813567ffffffffffffffff811115612dfb57612dfb612cf8565b604051612e126020601f19601f8501160182612d0e565b818152846020838601011115612e2757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612e5c57600080fd5b612e6586612bfb565b9450612e7360208701612bfb565b9350604086013567ffffffffffffffff80821115612e9057600080fd5b612e9c89838a01612d5f565b94506060880135915080821115612eb257600080fd5b612ebe89838a01612d5f565b93506080880135915080821115612ed457600080fd5b50612ee188828901612dd0565b9150509295509295909350565b60008060408385031215612f0157600080fd5b82359150612f1160208401612bfb565b90509250929050565b60008060008060808587031215612f3057600080fd5b843567ffffffffffffffff80821115612f4857600080fd5b612f5488838901612d5f565b95506020870135915080821115612f6a57600080fd5b612f7688838901612d5f565b9450612f8460408801612bfb565b93506060870135915080821115612f9a57600080fd5b50612fa787828801612dd0565b91505092959194509250565b600082601f830112612fc457600080fd5b81356020612fd182612d3b565b604051612fde8282612d0e565b83815260059390931b8501820192828101915086841115612ffe57600080fd5b8286015b84811015612dc55761301381612bfb565b8352918301918301613002565b6000806040838503121561303357600080fd5b823567ffffffffffffffff8082111561304b57600080fd5b61305786838701612fb3565b9350602085013591508082111561306d57600080fd5b5061307a85828601612d5f565b9150509250929050565b600081518084526020808501945080840160005b838110156130b457815187529582019590820190600101613098565b509495945050505050565b602081526000612a1c6020830184613084565b6000602082840312156130e457600080fd5b612a1c82612bfb565b600082601f8301126130fe57600080fd5b8135602061310b82612d3b565b6040516131188282612d0e565b83815260059390931b850182019282810191508684111561313857600080fd5b8286015b84811015612dc557803567ffffffffffffffff81111561315c5760008081fd5b61316a8986838b0101612d5f565b84525091830191830161313c565b60008060006060848603121561318d57600080fd5b833567ffffffffffffffff808211156131a557600080fd5b6131b187838801612fb3565b945060208601359150808211156131c757600080fd5b6131d3878388016130ed565b935060408601359150808211156131e957600080fd5b506131f6868287016130ed565b9150509250925092565b6000806040838503121561321357600080fd5b82359150602083013567ffffffffffffffff81111561323157600080fd5b61307a85828601612dd0565b60006020828403121561324f57600080fd5b813567ffffffffffffffff81111561326657600080fd5b61327284828501612dd0565b949350505050565b6000806040838503121561328d57600080fd5b61329683612bfb565b9150602083013580151581146132ab57600080fd5b809150509250929050565b600080604083850312156132c957600080fd5b6132d283612bfb565b9150612f1160208401612bfb565b6000806000606084860312156132f557600080fd5b83359250602084013567ffffffffffffffff8082111561331457600080fd5b61332087838801612dd0565b9350604086013591508082111561333657600080fd5b506131f686828701612dd0565b600080600080600060a0868803121561335b57600080fd5b61336486612bfb565b945061337260208701612bfb565b93506040860135925060608601359150608086013567ffffffffffffffff81111561339c57600080fd5b612ee188828901612dd0565b6000806000606084860312156133bd57600080fd5b833567ffffffffffffffff808211156133d557600080fd5b6133e187838801612d5f565b945060208601359150808211156133f757600080fd5b5061340486828701612d5f565b92505061341360408501612bfb565b90509250925092565b600181811c9082168061343057607f821691505b60208210810361345057634e487b7160e01b600052602260045260246000fd5b50919050565b60008351613468818460208801612c74565b83519083019061347c818360208801612c74565b7f2e6a736f6e0000000000000000000000000000000000000000000000000000009101908152600501949350505050565b634e487b7160e01b600052601160045260246000fd5b600060001982036134d6576134d66134ad565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6040815260006135066040830185613084565b82810360208401526135188185613084565b95945050505050565b805160009060208084018383156130b457815187529582019590820190600101613098565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b16815260006135866135806014840187613521565b85613521565b92835250506020019392505050565b600082198211156135a8576135a86134ad565b500190565b60006001600160a01b03808816835280871660208401525060a060408301526135d960a0830186613084565b82810360608401526135eb8186613084565b905082810360808401526135ff8185612ca0565b98975050505050505050565b60006020828403121561361d57600080fd5b8151612a1c81612c41565b600060033d1115610ea75760046000803e5060005160e01c90565b600060443d10156136515790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff816024840111818411171561369f57505050505090565b82850191508151818111156136b75750505050505090565b843d87010160208285010111156136d15750505050505090565b6136e060208286010187612d0e565b509095945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613723816017850160208801612c74565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613760816028840160208801612c74565b01602801949350505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526137a460a0830184612ca0565b979650505050505050565b634e487b7160e01b600052602160045260246000fd5b60008160001904831182151516156137df576137df6134ad565b500290565b6000816137f3576137f36134ad565b50600019019056fea2646970667358221220d446f0869a16798cc5584f891e0586a16833df9b2bdcdbca35d618b52498c4d864736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102255760003560e01c8063784923c51161012a578063a217fddf116100bd578063e985e9c51161008c578063ef99e27e11610071578063ef99e27e1461052c578063f242432a1461053f578063fb34b2011461055257600080fd5b8063e985e9c5146104c9578063ec87621c1461050557600080fd5b8063a217fddf14610474578063a22cb4651461047c578063d53913931461048f578063d547741f146104b657600080fd5b806391d14854116100f957806391d148541461040d578063924e893f1461044657806395d89b4114610459578063a0bcfc7f1461046157600080fd5b8063784923c5146103ca5780637ac3c02f146103ea5780638054c9c3146103f25780638456cb591461040557600080fd5b80632f2ff15d116101bd5780633f4ba83a1161018c5780635c975abb116101715780635c975abb1461039957806369582851146103a45780636c19e783146103b757600080fd5b80633f4ba83a146103715780634e1273f41461037957600080fd5b80632f2ff15d1461032557806333f6832a1461033857806336568abe1461034b5780633b616ef51461035e57600080fd5b806311d15e7a116101f957806311d15e7a1461029b578063238ac933146102c2578063248a9ca3146102ed5780632eb2c2d61461031057600080fd5b8062fdd58e1461022a57806301ffc9a71461025057806306fdde03146102735780630e89341c14610288575b600080fd5b61023d610238366004612c17565b610565565b6040519081526020015b60405180910390f35b61026361025e366004612c57565b61060e565b6040519015158152602001610247565b61027b61061f565b6040516102479190612ccc565b61027b610296366004612cdf565b6106ad565b61023d7f11c2020b6b4f4e00c2410234e0c72636b4739cf7cda4d8e24ef6b881350e670481565b6007546102d5906001600160a01b031681565b6040516001600160a01b039091168152602001610247565b61023d6102fb366004612cdf565b60009081526004602052604090206001015490565b61032361031e366004612e44565b610783565b005b610323610333366004612eee565b610825565b61027b610346366004612cdf565b61084f565b610323610359366004612eee565b610868565b61032361036c366004612f1a565b6108f4565b610323610a5d565b61038c610387366004613020565b610b00565b60405161024791906130bf565b60035460ff16610263565b6102636103b2366004612f1a565b610c3e565b6103236103c53660046130d2565b610e04565b61023d6103d83660046130d2565b60086020526000908152604090205481565b6102d5610e84565b610323610400366004613178565b610eaa565b610323611033565b61026361041b366004612eee565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610323610454366004613200565b6110d5565b61027b61118e565b61032361046f36600461323d565b61119b565b61023d600081565b61032361048a36600461327a565b6111ee565b61023d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6103236104c4366004612eee565b6111f9565b6102636104d73660046132b6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61023d7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b61032361053a3660046132e0565b61121e565b61032361054d366004613343565b611278565b6103236105603660046133a8565b611313565b60006001600160a01b0383166105e85760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b6000610619826113e7565b92915050565b6005805461062c9061341c565b80601f01602080910402602001604051908101604052809291908181526020018280546106589061341c565b80156106a55780601f1061067a576101008083540402835291602001916106a5565b820191906000526020600020905b81548152906001019060200180831161068857829003601f168201915b505050505081565b606060006106ba83611425565b6000848152600960205260408120805492935090916106d89061341c565b80601f01602080910402602001604051908101604052809291908181526020018280546107049061341c565b80156107515780601f1061072657610100808354040283529160200191610751565b820191906000526020600020905b81548152906001019060200180831161073457829003601f168201915b50505050509050818160405160200161076b929190613456565b60405160208183030381529060405292505050919050565b6001600160a01b03851633148061079f575061079f85336104d7565b6108115760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016105df565b61081e85858585856114b9565b5050505050565b60008281526004602052604090206001015461084081611765565b61084a838361176f565b505050565b6009602052600090815260409020805461062c9061341c565b6001600160a01b03811633146108e65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016105df565b6108f08282611811565b5050565b60035460ff16156109475760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016105df565b61095384848484610c3e565b61095c57600080fd5b6001600160a01b0382166000908152600860205260408120805491610980836134c3565b91905055506001845111156109ba576109b582858560405180604001604052806002815260200161060f60f31b815250611894565b610a14565b610a1482856000815181106109d1576109d16134dd565b6020026020010151856000815181106109ec576109ec6134dd565b602002602001015160405180604001604052806002815260200161060f60f31b815250611a9a565b816001600160a01b03167f37b39792f8a64e7bbbfdd0b29dcb99abf5dcf3b568c3632afdc8f083a000bb918585604051610a4f9291906134f3565b60405180910390a250505050565b610a6860003361041b565b610a7157600080fd5b610a9b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083361041b565b610aa457600080fd5b60035460ff16610af65760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016105df565b610afe611bd9565b565b60608151835114610b795760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016105df565b6000835167ffffffffffffffff811115610b9557610b95612cf8565b604051908082528060200260200182016040528015610bbe578160200160208202803683370190505b50905060005b8451811015610c3657610c09858281518110610be257610be26134dd565b6020026020010151858381518110610bfc57610bfc6134dd565b6020026020010151610565565b828281518110610c1b57610c1b6134dd565b6020908102919091010152610c2f816134c3565b9050610bc4565b509392505050565b6000805b8551811015610ce557600060096000888481518110610c6357610c636134dd565b602002602001015181526020019081526020016000208054610c849061341c565b905011610cd35760405162461bcd60e51b815260206004820152601960248201527f546f6b656e205479706520646f6573206e6f742065786973740000000000000060448201526064016105df565b80610cdd816134c3565b915050610c42565b506001600160a01b0383166000908152600860209081526040808320549051909291610d199187918a918a91879101613546565b60408051601f1981840301815291905280516020909101206007549091506001600160a01b0316610da185610d9b846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90611c75565b6001600160a01b031614610df75760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964205369676e617475726500000000000000000000000000000060448201526064016105df565b5060019695505050505050565b610e0f60003361041b565b610e1857600080fd5b600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040514281527f0174dd4916f0687a126f674eb9695b701ccfc94d9075cfc4a3b33dd79e4c0a769060200160405180910390a250565b6000610e90813361041b565b610e9957600080fd5b506007546001600160a01b03165b90565b610ed47f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63361041b565b610edd57600080fd5b610f077f11c2020b6b4f4e00c2410234e0c72636b4739cf7cda4d8e24ef6b881350e67043361041b565b610f1057600080fd5b60005b835181101561102d57610f8d848281518110610f3157610f316134dd565b6020026020010151848381518110610f4b57610f4b6134dd565b6020026020010151848481518110610f6557610f656134dd565b602002602001015160405180604001604052806002815260200161060f60f31b815250611894565b838181518110610f9f57610f9f6134dd565b60200260200101516001600160a01b03167ff70f4695b2833377e7353b1b9528346d0dde56ac9474f791c6bbf8d56c932a19848381518110610fe357610fe36134dd565b6020026020010151848481518110610ffd57610ffd6134dd565b60200260200101516040516110139291906134f3565b60405180910390a280611025816134c3565b915050610f13565b50505050565b61103e60003361041b565b61104757600080fd5b6110717f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083361041b565b61107a57600080fd5b60035460ff16156110cd5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016105df565b610afe611c91565b6110e060003361041b565b6110e957600080fd5b6111137f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083361041b565b61111c57600080fd5b600082815260096020526040812080546111359061341c565b9050116111845760405162461bcd60e51b815260206004820152601960248201527f546f6b656e205479706520616c7265616479206578697374730000000000000060448201526064016105df565b6108f08282611d19565b6006805461062c9061341c565b6111a660003361041b565b6111af57600080fd5b6111d97f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083361041b565b6111e257600080fd5b6111eb81611d38565b50565b6108f0338383611d4b565b60008281526004602052604090206001015461121481611765565b61084a8383611811565b61122960003361041b565b61123257600080fd5b61125c7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083361041b565b61126557600080fd5b61126e81611d38565b61084a8383611e3f565b6001600160a01b038516331480611294575061129485336104d7565b6113065760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f766564000000000000000000000000000000000000000000000060648201526084016105df565b61081e8585858585611ea7565b61133d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63361041b565b61134657600080fd5b6113707f11c2020b6b4f4e00c2410234e0c72636b4739cf7cda4d8e24ef6b881350e67043361041b565b61137957600080fd5b61139f81848460405180604001604052806002815260200161060f60f31b815250611894565b806001600160a01b03167ff70f4695b2833377e7353b1b9528346d0dde56ac9474f791c6bbf8d56c932a1984846040516113da9291906134f3565b60405180910390a2505050565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061061957506106198261208b565b6060600280546114349061341c565b80601f01602080910402602001604051908101604052809291908181526020018280546114609061341c565b80156114ad5780601f10611482576101008083540402835291602001916114ad565b820191906000526020600020905b81548152906001019060200180831161149057829003601f168201915b50505050509050919050565b81518351146115305760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d6174636800000000000000000000000000000000000000000000000060648201526084016105df565b6001600160a01b0384166115ac5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016105df565b336115bb818787878787612126565b60005b84518110156116f75760008582815181106115db576115db6134dd565b6020026020010151905060008583815181106115f9576115f96134dd565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561169f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016105df565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906116dc908490613595565b92505081905550505050806116f0906134c3565b90506115be565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117479291906134f3565b60405180910390a461175d81878787878761219f565b505050505050565b6111eb813361238b565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff166108f05760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117cd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16156108f05760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0384166119105760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016105df565b81518351146119875760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d6174636800000000000000000000000000000000000000000000000060648201526084016105df565b3361199781600087878787612126565b60005b8451811015611a32578381815181106119b5576119b56134dd565b60200260200101516000808784815181106119d2576119d26134dd565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611a1a9190613595565b90915550819050611a2a816134c3565b91505061199a565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a839291906134f3565b60405180910390a461081e8160008787878761219f565b6001600160a01b038416611b165760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016105df565b336000611b228561240b565b90506000611b2f8561240b565b9050611b4083600089858589612126565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290611b70908490613595565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611bd083600089898989612456565b50505050505050565b60035460ff16611c2b5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016105df565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000806000611c848585612599565b91509150610c3681612607565b60035460ff1615611ce45760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016105df565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c583390565b6000828152600960209081526040909120825161084a92840190612b62565b80516108f0906002906020840190612b62565b816001600160a01b0316836001600160a01b031603611dd25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016105df565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60008281526009602052604090208054611e589061341c565b1590506111845760405162461bcd60e51b815260206004820152601960248201527f546f6b656e205479706520616c7265616479206578697374730000000000000060448201526064016105df565b6001600160a01b038416611f235760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016105df565b336000611f2f8561240b565b90506000611f3c8561240b565b9050611f4c838989858589612126565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015611fe35760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016105df565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612020908490613595565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612080848a8a8a8a8a612456565b505050505050505050565b60006001600160e01b031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806120ee57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061061957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610619565b60035460ff161561175d5760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201527f7768696c6520706175736564000000000000000000000000000000000000000060648201526084016105df565b6001600160a01b0384163b1561175d576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c81906121fc90899089908890889088906004016135ad565b6020604051808303816000875af1925050508015612237575060408051601f3d908101601f191682019092526122349181019061360b565b60015b6122ec57612243613628565b806308c379a00361227c5750612257613643565b80612262575061227e565b8060405162461bcd60e51b81526004016105df9190612ccc565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016105df565b6001600160e01b031981167fbc197c810000000000000000000000000000000000000000000000000000000014611bd05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016105df565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff166108f0576123c9816001600160a01b031660146127f3565b6123d48360206127f3565b6040516020016123e59291906136eb565b60408051601f198184030181529082905262461bcd60e51b82526105df91600401612ccc565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612445576124456134dd565b602090810291909101015292915050565b6001600160a01b0384163b1561175d576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e61906124b3908990899088908890889060040161376c565b6020604051808303816000875af19250505080156124ee575060408051601f3d908101601f191682019092526124eb9181019061360b565b60015b6124fa57612243613628565b6001600160e01b031981167ff23a6e610000000000000000000000000000000000000000000000000000000014611bd05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016105df565b60008082516041036125cf5760208301516040840151606085015160001a6125c387828585612a23565b94509450505050612600565b82516040036125f857602083015160408401516125ed868383612b10565b935093505050612600565b506000905060025b9250929050565b600081600481111561261b5761261b6137af565b036126235750565b6001816004811115612637576126376137af565b036126845760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105df565b6002816004811115612698576126986137af565b036126e55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105df565b60038160048111156126f9576126f96137af565b0361276c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016105df565b6004816004811115612780576127806137af565b036111eb5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016105df565b606060006128028360026137c5565b61280d906002613595565b67ffffffffffffffff81111561282557612825612cf8565b6040519080825280601f01601f19166020018201604052801561284f576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612886576128866134dd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106128e9576128e96134dd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006129258460026137c5565b612930906001613595565b90505b60018111156129cd577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612971576129716134dd565b1a60f81b828281518110612987576129876134dd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936129c6816137e4565b9050612933565b508315612a1c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105df565b9392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a5a5750600090506003612b07565b8460ff16601b14158015612a7257508460ff16601c14155b15612a835750600090506004612b07565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612ad7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b0057600060019250925050612b07565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681612b4660ff86901c601b613595565b9050612b5487828885612a23565b935093505050935093915050565b828054612b6e9061341c565b90600052602060002090601f016020900481019282612b905760008555612bd6565b82601f10612ba957805160ff1916838001178555612bd6565b82800160010185558215612bd6579182015b82811115612bd6578251825591602001919060010190612bbb565b50612be2929150612be6565b5090565b5b80821115612be25760008155600101612be7565b80356001600160a01b0381168114612c1257600080fd5b919050565b60008060408385031215612c2a57600080fd5b612c3383612bfb565b946020939093013593505050565b6001600160e01b0319811681146111eb57600080fd5b600060208284031215612c6957600080fd5b8135612a1c81612c41565b60005b83811015612c8f578181015183820152602001612c77565b8381111561102d5750506000910152565b60008151808452612cb8816020860160208601612c74565b601f01601f19169290920160200192915050565b602081526000612a1c6020830184612ca0565b600060208284031215612cf157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715612d3457612d34612cf8565b6040525050565b600067ffffffffffffffff821115612d5557612d55612cf8565b5060051b60200190565b600082601f830112612d7057600080fd5b81356020612d7d82612d3b565b604051612d8a8282612d0e565b83815260059390931b8501820192828101915086841115612daa57600080fd5b8286015b84811015612dc55780358352918301918301612dae565b509695505050505050565b600082601f830112612de157600080fd5b813567ffffffffffffffff811115612dfb57612dfb612cf8565b604051612e126020601f19601f8501160182612d0e565b818152846020838601011115612e2757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612e5c57600080fd5b612e6586612bfb565b9450612e7360208701612bfb565b9350604086013567ffffffffffffffff80821115612e9057600080fd5b612e9c89838a01612d5f565b94506060880135915080821115612eb257600080fd5b612ebe89838a01612d5f565b93506080880135915080821115612ed457600080fd5b50612ee188828901612dd0565b9150509295509295909350565b60008060408385031215612f0157600080fd5b82359150612f1160208401612bfb565b90509250929050565b60008060008060808587031215612f3057600080fd5b843567ffffffffffffffff80821115612f4857600080fd5b612f5488838901612d5f565b95506020870135915080821115612f6a57600080fd5b612f7688838901612d5f565b9450612f8460408801612bfb565b93506060870135915080821115612f9a57600080fd5b50612fa787828801612dd0565b91505092959194509250565b600082601f830112612fc457600080fd5b81356020612fd182612d3b565b604051612fde8282612d0e565b83815260059390931b8501820192828101915086841115612ffe57600080fd5b8286015b84811015612dc55761301381612bfb565b8352918301918301613002565b6000806040838503121561303357600080fd5b823567ffffffffffffffff8082111561304b57600080fd5b61305786838701612fb3565b9350602085013591508082111561306d57600080fd5b5061307a85828601612d5f565b9150509250929050565b600081518084526020808501945080840160005b838110156130b457815187529582019590820190600101613098565b509495945050505050565b602081526000612a1c6020830184613084565b6000602082840312156130e457600080fd5b612a1c82612bfb565b600082601f8301126130fe57600080fd5b8135602061310b82612d3b565b6040516131188282612d0e565b83815260059390931b850182019282810191508684111561313857600080fd5b8286015b84811015612dc557803567ffffffffffffffff81111561315c5760008081fd5b61316a8986838b0101612d5f565b84525091830191830161313c565b60008060006060848603121561318d57600080fd5b833567ffffffffffffffff808211156131a557600080fd5b6131b187838801612fb3565b945060208601359150808211156131c757600080fd5b6131d3878388016130ed565b935060408601359150808211156131e957600080fd5b506131f6868287016130ed565b9150509250925092565b6000806040838503121561321357600080fd5b82359150602083013567ffffffffffffffff81111561323157600080fd5b61307a85828601612dd0565b60006020828403121561324f57600080fd5b813567ffffffffffffffff81111561326657600080fd5b61327284828501612dd0565b949350505050565b6000806040838503121561328d57600080fd5b61329683612bfb565b9150602083013580151581146132ab57600080fd5b809150509250929050565b600080604083850312156132c957600080fd5b6132d283612bfb565b9150612f1160208401612bfb565b6000806000606084860312156132f557600080fd5b83359250602084013567ffffffffffffffff8082111561331457600080fd5b61332087838801612dd0565b9350604086013591508082111561333657600080fd5b506131f686828701612dd0565b600080600080600060a0868803121561335b57600080fd5b61336486612bfb565b945061337260208701612bfb565b93506040860135925060608601359150608086013567ffffffffffffffff81111561339c57600080fd5b612ee188828901612dd0565b6000806000606084860312156133bd57600080fd5b833567ffffffffffffffff808211156133d557600080fd5b6133e187838801612d5f565b945060208601359150808211156133f757600080fd5b5061340486828701612d5f565b92505061341360408501612bfb565b90509250925092565b600181811c9082168061343057607f821691505b60208210810361345057634e487b7160e01b600052602260045260246000fd5b50919050565b60008351613468818460208801612c74565b83519083019061347c818360208801612c74565b7f2e6a736f6e0000000000000000000000000000000000000000000000000000009101908152600501949350505050565b634e487b7160e01b600052601160045260246000fd5b600060001982036134d6576134d66134ad565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6040815260006135066040830185613084565b82810360208401526135188185613084565b95945050505050565b805160009060208084018383156130b457815187529582019590820190600101613098565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b16815260006135866135806014840187613521565b85613521565b92835250506020019392505050565b600082198211156135a8576135a86134ad565b500190565b60006001600160a01b03808816835280871660208401525060a060408301526135d960a0830186613084565b82810360608401526135eb8186613084565b905082810360808401526135ff8185612ca0565b98975050505050505050565b60006020828403121561361d57600080fd5b8151612a1c81612c41565b600060033d1115610ea75760046000803e5060005160e01c90565b600060443d10156136515790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff816024840111818411171561369f57505050505090565b82850191508151818111156136b75750505050505090565b843d87010160208285010111156136d15750505050505090565b6136e060208286010187612d0e565b509095945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613723816017850160208801612c74565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613760816028840160208801612c74565b01602801949350505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526137a460a0830184612ca0565b979650505050505050565b634e487b7160e01b600052602160045260246000fd5b60008160001904831182151516156137df576137df6134ad565b500290565b6000816137f3576137f36134ad565b50600019019056fea2646970667358221220d446f0869a16798cc5584f891e0586a16833df9b2bdcdbca35d618b52498c4d864736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4922,
        "contract": "contracts/token/ERC1155/TowerInventory.sol:TowerInventory",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4928,
        "contract": "contracts/token/ERC1155/TowerInventory.sol:TowerInventory",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4930,
        "contract": "contracts/token/ERC1155/TowerInventory.sol:TowerInventory",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4782,
        "contract": "contracts/token/ERC1155/TowerInventory.sol:TowerInventory",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4291,
        "contract": "contracts/token/ERC1155/TowerInventory.sol:TowerInventory",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4286_storage)"
      },
      {
        "astId": 8277,
        "contract": "contracts/token/ERC1155/TowerInventory.sol:TowerInventory",
        "label": "name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 8279,
        "contract": "contracts/token/ERC1155/TowerInventory.sol:TowerInventory",
        "label": "symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 8281,
        "contract": "contracts/token/ERC1155/TowerInventory.sol:TowerInventory",
        "label": "signer",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8285,
        "contract": "contracts/token/ERC1155/TowerInventory.sol:TowerInventory",
        "label": "seedNonce",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8289,
        "contract": "contracts/token/ERC1155/TowerInventory.sol:TowerInventory",
        "label": "tokenTypes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4286_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4286_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)4286_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4283,
            "contract": "contracts/token/ERC1155/TowerInventory.sol:TowerInventory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4285,
            "contract": "contracts/token/ERC1155/TowerInventory.sol:TowerInventory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
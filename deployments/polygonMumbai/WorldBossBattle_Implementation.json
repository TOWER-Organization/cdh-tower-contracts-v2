{
  "address": "0x7942Ab512dD0e25Ba3332E7cAB33963D13C8140e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedTokenTime",
          "type": "uint256"
        }
      ],
      "name": "NFTRestaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_nftOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedTokenTime",
          "type": "uint256"
        }
      ],
      "name": "NFTStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_nftReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "NFTUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SetGamePausedState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldNFTContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SetNFTContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "oldSessionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newSessionId",
          "type": "bytes32"
        }
      ],
      "name": "Synced",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accessControls",
      "outputs": [
        {
          "internalType": "contract GameAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cdhNFT",
      "outputs": [
        {
          "internalType": "contract ICDHNFTInventory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "checkRequiredTokenBalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getAllToken",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "getSessionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getStakedTokensFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICDHNFTInventory",
          "name": "_cdhNft",
          "type": "address"
        },
        {
          "internalType": "contract ITOWER",
          "name": "_towerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftHolder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxStakeCount",
          "type": "uint256"
        },
        {
          "internalType": "contract IWBBActions",
          "name": "_wbbActionsAddress",
          "type": "address"
        },
        {
          "internalType": "contract GameAccessControls",
          "name": "_accessControls",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGameActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGamePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRegisteredUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastInteractionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestBattle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "mappingArray",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftHolder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "restake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "restakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restakeAllWithoutBattleId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "restakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "restakeTokensWithoutBattleId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "restakeWithoutBattleId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sessions",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        }
      ],
      "name": "setCDHNFTContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "setCoolDownPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        }
      ],
      "name": "setMaxStakeCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        }
      ],
      "name": "setNFTHolderAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_towerToken",
          "type": "address"
        }
      ],
      "name": "setTowerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wbbActionsAddress",
          "type": "address"
        }
      ],
      "name": "setWBBActionsContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeAllWithoutBattleId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "stakeTokensWithoutBattleId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakeWithoutBattleId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakedTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sessionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "stakedTokens",
          "type": "uint256[]"
        }
      ],
      "name": "sync",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "syncedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "toReturnStakedTokenTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleGameStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenToBattleId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "towerToken",
      "outputs": [
        {
          "internalType": "contract ITOWER",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "unstakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "unstakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateSession",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "validStakeCount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbbActions",
      "outputs": [
        {
          "internalType": "contract IWBBActions",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7eda5d89f51c533cd6da384ea837d78cfa8e1c1cf3dfe10d0b180fcf6a87d803",
  "receipt": {
    "to": null,
    "from": "0xfD286ed92Ae5e35C197dD59b39a232038B6D63d4",
    "contractAddress": "0x7942Ab512dD0e25Ba3332E7cAB33963D13C8140e",
    "transactionIndex": 8,
    "gasUsed": "4144345",
    "logsBloom": "0x
    "blockHash": "0x71485db3d3aa7cc41e2851487046bced59503699c8fb755d7583d2eddebc4e0e",
    "transactionHash": "0x7eda5d89f51c533cd6da384ea837d78cfa8e1c1cf3dfe10d0b180fcf6a87d803",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 30492583,
        "transactionHash": "0x7eda5d89f51c533cd6da384ea837d78cfa8e1c1cf3dfe10d0b180fcf6a87d803",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd286ed92ae5e35c197dd59b39a232038b6d63d4",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001615e3c553d70000000000000000000000000000000000000000000000000023e9731d0998e96b0000000000000000000000000000000000000000000018bad04b45c822fc6d2600000000000000000000000000000000000000000000000023d35d394445126b0000000000000000000000000000000000000000000018bad0615babe8504426",
        "logIndex": 31,
        "blockHash": "0x71485db3d3aa7cc41e2851487046bced59503699c8fb755d7583d2eddebc4e0e"
      }
    ],
    "blockNumber": 30492583,
    "cumulativeGasUsed": "5800334",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "be6e2da48b086e87270df68f6d94d65e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedTokenTime\",\"type\":\"uint256\"}],\"name\":\"NFTRestaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedTokenTime\",\"type\":\"uint256\"}],\"name\":\"NFTStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"NFTUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SetGamePausedState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldNFTContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SetNFTContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oldSessionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newSessionId\",\"type\":\"bytes32\"}],\"name\":\"Synced\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract GameAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdhNFT\",\"outputs\":[{\"internalType\":\"contract ICDHNFTInventory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"checkRequiredTokenBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getAllToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"getSessionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getStakedTokensFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICDHNFTInventory\",\"name\":\"_cdhNft\",\"type\":\"address\"},{\"internalType\":\"contract ITOWER\",\"name\":\"_towerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxStakeCount\",\"type\":\"uint256\"},{\"internalType\":\"contract IWBBActions\",\"name\":\"_wbbActionsAddress\",\"type\":\"address\"},{\"internalType\":\"contract GameAccessControls\",\"name\":\"_accessControls\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGameActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGamePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegisteredUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInteractionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBattle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"mappingArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"restakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restakeAllWithoutBattleId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"restakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"restakeTokensWithoutBattleId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"restakeWithoutBattleId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sessions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"setCDHNFTContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCoolDownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"setMaxStakeCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"setNFTHolderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_towerToken\",\"type\":\"address\"}],\"name\":\"setTowerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wbbActionsAddress\",\"type\":\"address\"}],\"name\":\"setWBBActionsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAllWithoutBattleId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeTokensWithoutBattleId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeWithoutBattleId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedTokens\",\"type\":\"uint256[]\"}],\"name\":\"sync\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"syncedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"toReturnStakedTokenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleGameStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToBattleId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"towerToken\",\"outputs\":[{\"internalType\":\"contract ITOWER\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"validStakeCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbbActions\",\"outputs\":[{\"internalType\":\"contract IWBBActions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@notice you can use this contract for only staking, unstaking and restaking the NFTs\",\"details\":\"WorldBattleSession,BattleOps and BattleOps are being inheriented in this contract\",\"kind\":\"dev\",\"methods\":{\"checkRequiredTokenBalance(uint256,uint256)\":{\"params\":{\"_balance\":\"user tower token balance\",\"_nftCount\":\"how many nft user have\"},\"returns\":{\"_0\":\"true if he has higher tower token balance than required\"}},\"getAllToken(address)\":{\"params\":{\"_player\":\"address of a user\"}},\"getStakedTokensFor(address)\":{\"params\":{\"_player\":\"is the user address\"}},\"initialize(address,address,address,address,uint256,address,address)\":{\"params\":{\"_cdhNft\":\"is to store contract address for CDHNFTInventory,\",\"_nftHolder\":\"is to store nftholder address\",\"_towerToken\":\"is to store contract address for toker token,\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"restake(uint256,string)\":{\"params\":{\"_battleId\":\"in which the token id will be restaked\",\"_tokenId\":\"is tokenid that user have\"}},\"restakeAll(string)\":{\"params\":{\"_battleId\":\"in which the token id will be restaked\"}},\"restakeTokens(uint256[],string)\":{\"params\":{\"_battleId\":\"in which the token id will be restaked\",\"_tokenIds\":\"is tokenid that user have staked\"}},\"restakeTokensWithoutBattleId(uint256[])\":{\"params\":{\"_tokenIds\":\"is tokenid that user are about to stake\"}},\"restakeWithoutBattleId(uint256)\":{\"params\":{\"_tokenId\":\"is tokenid that user are about to stake\"}},\"setCDHNFTContractAddress(address)\":{\"details\":\"only admin can set that\",\"params\":{\"_nftContract\":\"new NFT address\"}},\"setCoolDownPeriod(uint256)\":{\"params\":{\"time\":\"in unix\"},\"returns\":{\"_0\":\"time\"}},\"setNFTHolderAddress(address)\":{\"details\":\"only admin can set that\",\"params\":{\"_holder\":\"new holder address\"}},\"setTowerToken(address)\":{\"details\":\"only admin can set that\",\"params\":{\"_towerToken\":\"is the new token address\"}},\"stake(uint256,string)\":{\"details\":\"it calls internalStake function for further processing\",\"params\":{\"_battleId\":\"is unique battle in which the NFT will be staked\",\"_tokenId\":\"is tokenId of CDHNFT\"}},\"stakeTokens(uint256[],string)\":{\"details\":\"it calls internalStake function for further processing\",\"params\":{\"_battleId\":\"is unique battle in which the NFT will be staked\",\"tokenIds\":\"is an array of tokenId of CDHNFT\"}},\"stakeTokensWithoutBattleId(uint256[])\":{\"params\":{\"_tokenIds\":\"an array of NFT\"}},\"stakeWithoutBattleId(uint256)\":{\"params\":{\"_tokenId\":\"is tokenid that user are about to stake\"}},\"toReturnStakedTokenTime(address,uint256)\":{\"params\":{\"_player\":\"user address\",\"_tokenId\":\"token id which he staked\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint256,string)\":{\"details\":\"it calls internalUnStake function for further processing\",\"params\":{\"_battleId\":\"is unique battle in which the NFT will be unstaked\",\"_tokenId\":\"is tokenId of CDHNFT\"}},\"unstakeAll(string)\":{\"details\":\"it calls internalUnStakeAll function for further processing\",\"params\":{\"_battleId\":\"is unique battle in which the NFT will be unstaked\"}},\"unstakeTokens(uint256[],string)\":{\"details\":\"it calls internalUnStake function for further processing\",\"params\":{\"_battleId\":\"is unique battle in which the NFT will be unstaked\",\"tokenIds\":\"is tokenId of CDHNFT\"}}},\"title\":\"creation of WorldBossBattle where user can stake their NFT\",\"version\":1},\"userdoc\":{\"events\":{\"NFTRestaked(address,uint256,string,uint256)\":{\"notice\":\"event is emitted when nft is restaked with owner address, token id and in which battle the token is restaked\"},\"NFTStaked(address,uint256,string,uint256)\":{\"notice\":\"event is emitted when nft is staked with owner address, token id and in which battle the token is staked\"},\"NFTUnstaked(address,uint256,string)\":{\"notice\":\"event is emitted when nft is unstaked with owner address, token id and in which battle the token is unstaked\"},\"SetGamePausedState(bool,address)\":{\"notice\":\"event for when game is paused which emits isPaused status and sender address\"},\"SetNFTContract(address,address,address)\":{\"notice\":\"Event for when setting cdh contract which emitts old cdh NFT adress and new cdh NFT address along with sender adddress\"}},\"kind\":\"user\",\"methods\":{\"cdhNFT()\":{\"notice\":\"to store cdhNFT contract address\"},\"checkRequiredTokenBalance(uint256,uint256)\":{\"notice\":\"internal methods for staking operations\"},\"getAllToken(address)\":{\"notice\":\"function to get all the token that a address have\"},\"getStakedTokensFor(address)\":{\"notice\":\"function to get the tokenId of a user that staked\"},\"initialize(address,address,address,address,uint256,address,address)\":{\"notice\":\"since it is upgradable function it is initialized instead of using constructor\"},\"isGamePaused()\":{\"notice\":\"to store if the game should be paused or not\"},\"mappingArray(address,string)\":{\"notice\":\"below is nested mapping, have two string acts as unique key they are index and count index denote         the \\\"stakersAddress\\\" index where value counts how many times staking is done\"},\"restake(uint256,string)\":{\"notice\":\"function where  restaking works\"},\"restakeAll(string)\":{\"notice\":\"function where restakeAll works\"},\"restakeAllWithoutBattleId()\":{\"notice\":\"function where user can restakeAll without battleId\"},\"restakeTokens(uint256[],string)\":{\"notice\":\"function where  restakeTokens works\"},\"restakeTokensWithoutBattleId(uint256[])\":{\"notice\":\"function where user can restake an array without battleId\"},\"restakeWithoutBattleId(uint256)\":{\"notice\":\"function where user can restake without battleId\"},\"setCDHNFTContractAddress(address)\":{\"notice\":\"function to change the contract address of CDHNFT\"},\"setCoolDownPeriod(uint256)\":{\"notice\":\"to set the cooldown period\"},\"setNFTHolderAddress(address)\":{\"notice\":\"function to change the holder address that will set CDHNFT\"},\"setTowerToken(address)\":{\"notice\":\"function to change the contract address of tower token\"},\"stake(uint256,string)\":{\"notice\":\"public function to stake a single CDHNFT that sender owns\"},\"stakeAllWithoutBattleId()\":{\"notice\":\"function where user can stake all NFT without battleId\"},\"stakeTokens(uint256[],string)\":{\"notice\":\"public function to stake a array of CDHNFT that sender owns\"},\"stakeTokensWithoutBattleId(uint256[])\":{\"notice\":\"function to stake an array of token without battleID\"},\"stakeWithoutBattleId(uint256)\":{\"notice\":\"function where user can stake without battleId\"},\"stakers(address)\":{\"notice\":\"mapping for TokenStakers\"},\"toReturnStakedTokenTime(address,uint256)\":{\"notice\":\"function to see user stakedTokenTime\"},\"tokenOwner(uint256)\":{\"notice\":\"Mapping of tokenId to owner's address\"},\"tokenToBattleId(uint256)\":{\"notice\":\"maps tokenId to battleId\"},\"towerToken()\":{\"notice\":\"to store tower token contract\"},\"unstake(uint256,string)\":{\"notice\":\"public function to unstake a single CDHNFT that sender owns\"},\"unstakeAll(string)\":{\"notice\":\"public function to unstake all  CDHNFT that sender owns\"},\"unstakeTokens(uint256[],string)\":{\"notice\":\"public function to unstake an array of  CDHNFT that sender owns\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/game/WorldBossBattle.sol\":\"WorldBossBattle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/game/GameAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n//import \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n\\n/// @title A contract for giving role for address\\n/// @dev this is an upgradable function\\ncontract GameAccessControls is AccessControl {\\n    bytes32 public constant MANAGER_ROLE = 0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08; // keccak256(abi.encodePacked(\\\"MANAGER_ROLE\\\"));\\n\\n    event GameRoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event GameRoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /// @notice Constructor for setting up default roles\\n    constructor() public {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(MANAGER_ROLE, _msgSender());\\n    }\\n\\n    /// @notice function to give an address Admin role\\n    /// @param _address address that will be getting role\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit GameRoleGranted(DEFAULT_ADMIN_ROLE, _address, _msgSender());\\n    }\\n\\n    /// @notice function to give an address Admin role\\n    /// @param _address address that will be getting role\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit GameRoleRevoked(DEFAULT_ADMIN_ROLE, _address, _msgSender());\\n    }\\n\\n    /// @notice function to give role to an address\\n    /// @param _address address that will be getting role\\n    function addRole(bytes32 _role, address _address) external {\\n        grantRole(_role, _address);\\n        emit GameRoleGranted(_role, _address, _msgSender());\\n    }\\n\\n    /// @notice function to remove role of an address\\n    /// @param _address address that will be revoked\\n    function removeRole(bytes32 _role, address _address) external {\\n        revokeRole(_role, _address);\\n        emit GameRoleRevoked(_role, _address, _msgSender());\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Unauthorized.\\\");\\n        _;\\n    }\\n\\n    /// @notice function to check an address has Admin role\\n    /// @param _address address that has admin role\\n    /// @return bool true if address is admmin\\n    function hasAdminRole(address _address) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    function isAuthorized(address _address) external view returns (bool) {\\n        return hasAdminRole(_address) || hasRole(MANAGER_ROLE, _address);\\n    }\\n}\\n\",\"keccak256\":\"0x535751b95b2b9c330d393fe590e0f0e0245734503a3477f068f5ad5da267ca69\",\"license\":\"MIT\"},\"contracts/game/Session.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract GameSession is OwnableUpgradeable {\\n    using ECDSA for bytes32;\\n\\n    event Synced(address indexed sender, bytes32 oldSessionId, bytes32 newSessionId);\\n\\n    address private signer;\\n\\n    mapping(address => bytes32) public sessions;\\n    mapping(address => uint256) public syncedTime;\\n\\n    function setSigner(address _signer) public {\\n        signer = _signer;\\n    }\\n\\n    function generateSessionId(address msgSender) private view returns (bytes32) {\\n        return keccak256(abi.encodePacked(_msgSender(), sessions[msgSender], block.number)).toEthSignedMessageHash();\\n    }\\n\\n    function getSessionId(address msgSender) public view returns (bytes32) {\\n        bytes32 id = sessions[msgSender];\\n        if (id == 0) {\\n            id = keccak256(abi.encodePacked(_msgSender(), block.number)).toEthSignedMessageHash();\\n        }\\n        return id;\\n    }\\n\\n    function updateSession() public returns (bool) {\\n        address msgSender = _msgSender();\\n\\n        sessions[msgSender] = generateSessionId(msgSender);\\n        return true;\\n    }\\n\\n    function isRegisteredUser() public view returns (bool) {\\n        return sessions[_msgSender()] != 0;\\n    }\\n\\n    modifier isRegistered() {\\n        require(sessions[_msgSender()] != 0, \\\"WorldBattle: Not Registered\\\");\\n        _;\\n    }\\n\\n    //  modifier isReady(uint tokenId) {\\n    //     require(syncedAt'[tokenId] < block.timestamp - 60, \\\"NftStaking: Too many requests\\\");\\n    //     _;\\n    // }\\n\\n    function verify(bytes32 hash, bytes memory signature) public view returns (bool) {\\n        bytes32 ethSignedHash = hash.toEthSignedMessageHash();\\n        return ethSignedHash.recover(signature) == signer;\\n    }\\n\\n    function verificationSignature(bytes32 sessionId, address user, uint256[] memory stakedTokens) private pure returns (bytes32 signature) {\\n        return keccak256(abi.encode(sessionId, user, stakedTokens));\\n    }\\n\\n    // state of the game\\n    function sync(bytes memory signature, bytes32 sessionId, uint256[] memory stakedTokens) public returns (bool success) {\\n        address msgSender = _msgSender();\\n        bytes32 latestGameSessionId = sessions[msgSender];\\n\\n        require(latestGameSessionId == sessionId, \\\"WorldBattle: Session has changed\\\");\\n\\n        bytes32 hashToVerify = verificationSignature(sessionId, msgSender, stakedTokens);\\n        require(verify(hashToVerify, signature), \\\"WorldBattle: Couldn't Verify.\\\");\\n\\n        bytes32 newSessionId = generateSessionId(msgSender);\\n        sessions[msgSender] = newSessionId;\\n        syncedTime[msgSender] = block.timestamp;\\n\\n        emit Synced(msgSender, sessionId, newSessionId);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2215a746fde6dd4bb92d66d35967168009fc9ab3025b586e8a7d17aedf52fc2f\",\"license\":\"MIT\"},\"contracts/game/WBBActions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./WBBData.sol\\\";\\nimport \\\"./GameAccessControls.sol\\\";\\n\\ncontract WBBActions is Initializable, ContextUpgradeable, WBBData {\\n    GameAccessControls public accessControls;\\n\\n    function initialize(GameAccessControls _accessControls) public initializer {\\n        accessControls = GameAccessControls(_accessControls);\\n    }\\n\\n\\n\\n    /*\\n        ---------------------------------------\\n        \\u2554\\u2557 \\u250c\\u2500\\u2510\\u250c\\u252c\\u2510\\u250c\\u252c\\u2510\\u252c  \\u250c\\u2500\\u2510  \\u2554\\u2550\\u2557\\u250c\\u2500\\u2510\\u250c\\u252c\\u2510\\u252c\\u250c\\u2500\\u2510\\u250c\\u2510\\u250c\\u250c\\u2500\\u2510\\n        \\u2560\\u2569\\u2557\\u251c\\u2500\\u2524 \\u2502  \\u2502 \\u2502  \\u251c\\u2524   \\u2560\\u2550\\u2563\\u2502   \\u2502 \\u2502\\u2502 \\u2502\\u2502\\u2502\\u2502\\u2514\\u2500\\u2510\\n        \\u255a\\u2550\\u255d\\u2534 \\u2534 \\u2534  \\u2534 \\u2534\\u2500\\u2518\\u2514\\u2500\\u2518  \\u2569 \\u2569\\u2514\\u2500\\u2518 \\u2534 \\u2534\\u2514\\u2500\\u2518\\u2518\\u2514\\u2518\\u2514\\u2500\\u2518\\n        ---------------------------------------\\n    */\\n    function checkBattleExists(string memory _battleId) public view returns (bool) {\\n        if (battleList.length > 0) {\\n            string[] memory allBattleList = battleList;\\n            for (uint256 i = 0; i < allBattleList.length;) {\\n                if (keccak256(abi.encodePacked(allBattleList[i])) == keccak256(abi.encodePacked(_battleId))) return true;\\n            unchecked {i++;}\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function setBattleStatus(string memory _battleId, bool _status) external {\\n        require(accessControls.isAuthorized(msg.sender), \\\"WBB: Unauthorized to set battle status\\\");\\n        require(checkBattleExists(_battleId), \\\"WBB: Battle doesn't exist\\\");\\n        Battle storage battleInstance = battles[_battleId];\\n        battleInstance.status = _status;\\n    }\\n\\n    /// @notice function to create battle requires battleId and bossId, starting time and ending time\\n    /// @param _battleId which is a string and identify battles,\\n    /// @param _bossIds which is an array of string,\\n    /// @param _startTime and\\n    /// @param _endTime are unix timestamp\\n    function createBattle(string memory _battleId, string[] memory _bossIds, uint256 _startTime, uint256 _endTime) external {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.isAuthorized(operatorAddress), \\\"WBB: Unauthorized to create battle\\\");\\n        require(checkBattleExists(_battleId) == false, \\\"WBB: Battle already Exists\\\");\\n        require(_endTime > _startTime, \\\"WBB: invalid battle period\\\");\\n\\n        checkActiveBosses(_bossIds);\\n        // validate all the bossIds\\n\\n        Battle storage battleInstance = battles[_battleId];\\n        battleInstance.battleId = _battleId;\\n        battleInstance.startTime = _startTime;\\n        battleInstance.endTime = _endTime;\\n        battleInstance.status = true;\\n        battleInstance.bossCount = _bossIds.length;\\n        battleList.push(_battleId);\\n\\n        battleInstance.index = battleList.length - 1;\\n        for (uint i = 0; i < _bossIds.length; i++) {\\n            battleInstance.bossIds.push(_bossIds[i]);\\n        }\\n        emit CreateBattle(operatorAddress, _battleId, _bossIds, _startTime, _endTime);\\n    }\\n\\n    /// @notice function to update battle requires battleId, bossId, starting time and ending time along with battle status.\\n    ///         Note: 1. Battle should be inactive to be able to update.\\n    ///               2. If battle should be updated with new bosses or updated boss, new battle SHOULD be created\\n    /// @param _battleId which is a string and identify battles,\\n    /// @param _startTime and\\n    /// @param _endTime are unix timestamp\\n    function updateBattle(string memory _battleId, uint256 _startTime, uint256 _endTime) external {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.isAuthorized(operatorAddress), \\\"WBB: Unauthorized to update battle\\\");\\n        require(checkBattleExists(_battleId), \\\"WBB: Battle doesn't exists\\\");\\n        require(battles[_battleId].status == false, \\\"WBB: Battle is active\\\");\\n\\n        Battle storage battleInstance = battles[_battleId];\\n        battleInstance.battleId = _battleId;\\n        battleInstance.startTime = _startTime;\\n        battleInstance.endTime = _endTime;\\n\\n        emit UpdateBattle(operatorAddress, _battleId, _startTime, _endTime);\\n    }\\n\\n\\n    /// @notice function to check the battleStatus i.e true or false\\n    /// @param _battleId its a string\\n    function checksBattleStatus(string memory _battleId) public view returns (bool) {\\n        require(checkBattleExists(_battleId), \\\"WBB: Battle doesn't exists\\\");\\n        return battles[_battleId].status;\\n    }\\n\\n    /// @notice to check the battle Ended or not i.e true or false\\n    /// @param _battleId its a string\\n    function checkBattleEnded(string memory _battleId) public view returns (bool) {\\n        return block.timestamp > battles[_battleId].endTime;\\n    }\\n\\n    /// @notice gives the end time of an battle in unix\\n    /// @param _battleId which is in string format\\n    function getBattlePeriod(string memory _battleId) public view returns (uint256 startTime, uint256 endTime) {\\n        return (battles[_battleId].startTime, battles[_battleId].endTime);\\n    }\\n\\n    function getLatestBattle() public view returns (string memory battleId) {\\n        return battleList[battleList.length - 1];\\n    }\\n\\n\\n    /*\\n        ---------------------------------\\n        \\u2554\\u2557 \\u250c\\u2500\\u2510\\u250c\\u2500\\u2510\\u250c\\u2500\\u2510  \\u2554\\u2550\\u2557\\u250c\\u2500\\u2510\\u250c\\u252c\\u2510\\u252c\\u250c\\u2500\\u2510\\u250c\\u2510\\u250c\\u250c\\u2500\\u2510\\n        \\u2560\\u2569\\u2557\\u2502 \\u2502\\u2514\\u2500\\u2510\\u2514\\u2500\\u2510  \\u2560\\u2550\\u2563\\u2502   \\u2502 \\u2502\\u2502 \\u2502\\u2502\\u2502\\u2502\\u2514\\u2500\\u2510\\n        \\u255a\\u2550\\u255d\\u2514\\u2500\\u2518\\u2514\\u2500\\u2518\\u2514\\u2500\\u2518  \\u2569 \\u2569\\u2514\\u2500\\u2518 \\u2534 \\u2534\\u2514\\u2500\\u2518\\u2518\\u2514\\u2518\\u2514\\u2500\\u2518\\n        ---------------------------------\\n    */\\n\\n    function checkBossExists(string memory _bossId) public view returns (bool) {\\n        if (bossList.length > 0) {\\n            string[] memory allBossList = bossList;\\n            for (uint256 i = 0; i < allBossList.length;) {\\n                if (keccak256(abi.encodePacked(allBossList[i])) == keccak256(abi.encodePacked(_bossId))) return true;\\n            unchecked {i++;}\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function setBossStatus(string memory _bossId, bool _status) external {\\n        require(accessControls.isAuthorized(msg.sender), \\\"WBB: Unauthorized to update boss status\\\");\\n        require(checkBossExists(_bossId), \\\"WBB: Boss doesn't exist\\\");\\n        Boss storage bossInstance = bosses[_bossId];\\n        bossInstance.status = _status;\\n    }\\n\\n    /// @notice checks the boss is available or not\\n    /// @param _bossId is should be given as parameter\\n    function checkActiveBosses(string[] memory _bossId) public {\\n        for (uint i = 0; i < _bossId.length; i++) {\\n            require(checkBossStatus(_bossId[i]), \\\"WBB: boss not created\\\");\\n        }\\n    }\\n\\n    /// @notice checks the boss is available or not\\n    /// @param _bossId is should be given as parameter\\n    function checkBossStatus(string memory _bossId) public view returns (bool) {\\n        return bosses[_bossId].status;\\n    }\\n\\n    /// @notice Method to create a new boss.\\n    /// @param bossId which is a string and identify boss,\\n    /// @param name which is name of string,\\n    /// @param maxHp is uint that have boss health and\\n    /// @param uri is a string\\n    function newBoss(string memory bossId, string memory name, uint256 maxHp, string memory uri) public {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.isAuthorized(operatorAddress), \\\"WBB: Unauthorized to create boss\\\");\\n        require(checkBossExists(bossId) == false, \\\"WBB: Boss already Exists\\\");\\n\\n        Boss storage bossInstance = bosses[bossId];\\n\\n        bossInstance.bossId = bossId;\\n        bossInstance.name = name;\\n        bossInstance.maxHp = maxHp;\\n        bossInstance.uri = uri;\\n        bossInstance.status = true;\\n        bossList.push(bossId);\\n        bossInstance.index = bossList.length - 1;\\n        emit CreateBoss(operatorAddress, bossId, name, maxHp, uri);\\n    }\\n\\n    /// @notice function to update the boss character\\n    /// @param bossId which is a string and identify boss,\\n    /// @param name which is name of string,\\n    /// @param maxHp is uint that have boss health and\\n    /// @param uri is a string\\n    function updateBoss(string memory bossId, string memory name, uint256 maxHp, string memory uri) public {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.isAuthorized(operatorAddress), \\\"WBB: Unauthorized to update boss\\\");\\n        require(checkBossExists(bossId), \\\"WBB: Boss doesn't exist\\\");\\n\\n        Boss storage bossInstance = bosses[bossId];\\n        require(bossInstance.status == false, \\\"WBB: Boss is active\\\");\\n\\n        bossInstance.bossId = bossId;\\n        bossInstance.name = name;\\n        bossInstance.maxHp = maxHp;\\n        bossInstance.uri = uri;\\n\\n        bossList.push(bossId);\\n        emit UpdateBoss(operatorAddress, bossId, name, maxHp, uri);\\n    }\\n}\\n\",\"keccak256\":\"0xd510e07fafe719c755927387ac938b3a281617b3d41234e1537c4983798511f8\",\"license\":\"MIT\"},\"contracts/game/WBBData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/// @title Battle related actions and datastructures\\n/// @notice you can use this contract for only creating and updating boss and battle\\ncontract WBBData  {\\n\\n    /// @notice events to be emitted when battle is created, disabled and enable\\n    event CreateBattle(address indexed _operatorAddress, string _battleId, string[] _bossIds, uint256 _startTime, uint256 _endTime);\\n    event UpdateBattle(address indexed _operatorAddress, string _battleId, uint256 _startTime, uint256 _endTime);\\n    event DisableBattle(string _battleId, bool _status);\\n    event EnableBattle(string _battleId, bool _status);\\n\\n\\n    /// @notice events to be emitted when boss is created and updated\\n    event CreateBoss(address indexed _operatorAddress, string _bossId, string _name, uint256 _maxHp, string _uri);\\n    event UpdateBoss(address indexed _operatorAddress, string _bossId, string _name, uint256 _maxHp, string _uri);\\n\\n    /// @notice to store the data of battle\\n    struct Battle {\\n        string battleId;\\n        string[] bossIds;\\n        uint256 bossCount;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool status;\\n        uint index;\\n    }\\n\\n    /// @notice Structure of the boss which will be used in battle\\n    struct Boss {\\n        string bossId;\\n        string name;\\n        uint256 maxHp;\\n        string uri;\\n        bool status;\\n        uint256 index;\\n    }\\n\\n    /// @notice mapping the data of the battle\\n    mapping(string => Battle) public battles;\\n\\n    /// @notice array of all created battle\\n    string[] public battleList;\\n\\n    /// @notice mapping of structure of boss\\n    mapping(string => Boss) public bosses;\\n\\n    /// @notice variable to store every boss that is created\\n    string[] public bossList;\\n}\\n\",\"keccak256\":\"0xea8463eeaa1a166948298edab56e853447248aa4057e7a566816794f4415e88f\",\"license\":\"MIT\"},\"contracts/game/WorldBossBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./Session.sol\\\";\\nimport \\\"./WBBActions.sol\\\";\\n\\nimport \\\"./interfaces/ICDHNFTInventory.sol\\\";\\nimport \\\"./interfaces/ITOWER.sol\\\";\\nimport \\\"./interfaces/IWBBActions.sol\\\";\\nimport \\\"./interfaces/GameStakeOps.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title creation of WorldBossBattle where user can stake their NFT\\n/// @author\\n/// @notice you can use this contract for only staking, unstaking and restaking the NFTs\\n/// @dev WorldBattleSession,BattleOps and BattleOps are being inheriented in this contract\\n\\ncontract WorldBossBattle is Initializable, ContextUpgradeable, GameSession, GameStakeOps {\\n    using ECDSA for bytes32;\\n\\n    /// @notice Event for when setting cdh contract which emitts old cdh NFT adress and new cdh NFT address along with sender adddress\\n    event SetNFTContract(address indexed _oldNFTContract, address indexed _nftContract, address sender);\\n    /// @notice event for when game is paused which emits isPaused status and sender address\\n    event SetGamePausedState(bool isPaused, address sender);\\n    /// @notice event is emitted when nft is staked with owner address, token id and in which battle the token is staked\\n    event NFTStaked(address indexed _nftOwner, uint256 _tokenId, string _battleId, uint256 stakedTokenTime);\\n    /// @notice event is emitted when nft is unstaked with owner address, token id and in which battle the token is unstaked\\n    event NFTUnstaked(address indexed _nftReceiver, uint256 _tokenId, string _battleId);\\n    /// @notice event is emitted when nft is restaked with owner address, token id and in which battle the token is restaked\\n    event NFTRestaked(address indexed _player, uint256 _tokenId, string _battleId, uint256 stakedTokenTime);\\n\\n    /// @notice to store cdhNFT contract address\\n    ICDHNFTInventory public cdhNFT;\\n    /// @notice to store tower token contract\\n    ITOWER public towerToken;\\n\\n    IWBBActions public wbbActions;\\n    GameAccessControls public accessControls;\\n    address public nftHolder;\\n    uint256 public lastInteractionTime;\\n\\n    /// @notice to store data of user\\n    struct TokenStaker {\\n        uint256[] tokenIds;\\n        mapping(uint256 => uint256) tokenIndex;\\n        uint256 balance; // might not be required\\n        uint256 stakedTime;\\n        mapping(uint256 => uint256) stakedTokenTime;\\n    }\\n\\n    /// @notice to store list of staker address\\n    address[] stakersAddress;\\n\\n    /// @notice below is nested mapping, have two string acts as unique key they are index and count index denote\\n    ///         the \\\"stakersAddress\\\" index where value counts how many times staking is done\\n    mapping(address => mapping(string => uint256)) public mappingArray;\\n\\n    /// @notice mapping for TokenStakers\\n    mapping(address => TokenStaker) public stakers;\\n\\n    /// @notice Mapping of tokenId to owner's address\\n    mapping(uint256 => address) public tokenOwner;\\n\\n    /// @notice maps tokenId to battleId\\n    mapping(uint256 => string) public tokenToBattleId;\\n\\n    /// @notice to store the cooldownperiod\\n    uint256 cooldownPeriod;\\n\\n    /// @notice to store if the game should be paused or not\\n    bool public isGamePaused;\\n\\n    uint256 public maxStakeCount;\\n\\n    /// @notice since it is upgradable function it is initialized instead of using constructor\\n    /// @param _cdhNft is to store contract address for CDHNFTInventory,\\n    /// @param _towerToken is to store contract address for toker token,\\n    /// @param _nftHolder is to store nftholder address\\n    function initialize(\\n        ICDHNFTInventory _cdhNft,\\n        ITOWER _towerToken,\\n        address _nftHolder,\\n        address _signer,\\n        uint256 _maxStakeCount,\\n        IWBBActions _wbbActionsAddress,\\n        GameAccessControls _accessControls\\n    ) public initializer {\\n        cdhNFT = _cdhNft;\\n        towerToken = _towerToken;\\n        nftHolder = _nftHolder;\\n        maxStakeCount = _maxStakeCount;\\n        wbbActions = IWBBActions(_wbbActionsAddress);\\n        accessControls = GameAccessControls(_accessControls);\\n\\n        lastInteractionTime = block.timestamp;\\n        maxStakeCount = 10;\\n        isGamePaused = true;\\n\\n        setSigner(_signer);\\n\\n        __Context_init();\\n    }\\n\\n    /// @notice function to change the contract address of tower token\\n    ///@param _towerToken is the new token address\\n    ///@dev only admin can set that\\n    function setTowerToken(address _towerToken) external {\\n        require(accessControls.isAuthorized(msg.sender), \\\"WBB: Unauthorized\\\");\\n        require(_towerToken != address(0), \\\"WBB: Invalid token address\\\");\\n\\n        towerToken = ITOWER(_towerToken);\\n    }\\n\\n    /// @notice function to change the contract address of CDHNFT\\n    ///@param _nftContract new NFT address\\n    ///@dev only admin can set that\\n    function setCDHNFTContractAddress(address _nftContract) external {\\n        require(accessControls.isAuthorized(msg.sender), \\\"WBB: Unauthorized\\\");\\n        require(_nftContract != address(0), \\\"WBB: Invalid NFT contract\\\");\\n\\n        emit SetNFTContract(address(cdhNFT), _nftContract, _msgSender());\\n        cdhNFT = ICDHNFTInventory(_nftContract);\\n    }\\n\\n    /// @notice function to change the holder address that will set CDHNFT\\n    /// @param _holder new holder address\\n    /// @dev only admin can set that\\n    function setNFTHolderAddress(address _holder) external {\\n        require(accessControls.isAuthorized(msg.sender), \\\"WBB: Unauthorized\\\");\\n\\n        nftHolder = _holder;\\n    }\\n\\n    function setWBBActionsContract(address _wbbActionsAddress) external {\\n        require(accessControls.isAuthorized(msg.sender), \\\"WBB: Unauthorized\\\");\\n        require(_wbbActionsAddress != address(0), \\\"WBB: Invalid Actions contract\\\");\\n\\n        wbbActions = IWBBActions(_wbbActionsAddress);\\n    }\\n\\n    function toggleGameStatus() external {\\n        require(accessControls.isAuthorized(msg.sender), \\\"WBB: Unauthorized\\\");\\n\\n        isGamePaused = !isGamePaused;\\n        emit SetGamePausedState(isGamePaused, _msgSender());\\n    }\\n\\n    function isGameActive() public {\\n        require(!isGamePaused, \\\"WBB: Game not active\\\");\\n    }\\n\\n    function latestBattle() public returns (string memory) {\\n        return wbbActions.getLatestBattle();\\n    }\\n\\n    function validStakeCount(uint256[] memory tokenIds) public view returns (bool) {\\n        return tokenIds.length + 1 < maxStakeCount;\\n    }\\n\\n    function setMaxStakeCount(uint256 _maxCount) external {\\n        require(accessControls.isAuthorized(msg.sender), \\\"WBB: Unauthorized\\\");\\n\\n        maxStakeCount = _maxCount;\\n    }\\n\\n    /*         Game Operations         */\\n\\n    /// @notice function to get all the token that a address have\\n    /// @param _player address of a user\\n    function getAllToken(address _player) public view returns (uint256[] memory) {\\n        uint256[] memory allTokens = cdhNFT.getAllTokens(_player);\\n        return allTokens;\\n    }\\n\\n    /// @notice public function to stake a single CDHNFT that sender owns\\n    /// @param _tokenId is tokenId of CDHNFT\\n    /// @param _battleId is unique battle in which the NFT will be staked\\n    /// @dev it calls internalStake function for further processing\\n    function stake(uint256 _tokenId, string memory _battleId) external override {\\n        internalStake(_msgSender(), _tokenId, _battleId);\\n    }\\n\\n    /// @notice public function to stake a all CDHNFT that sender owns\\n    /// @param _battleId is unique battle in which the NFT will be staked\\n    /// @dev it calls internalStakeAll function for further processing\\n    //    function stakeAll(string memory _battleId) external override {\\n    //        internalStakeAll(_msgSender(), _battleId);\\n    //    }\\n\\n    /// @notice public function to stake a array of CDHNFT that sender owns\\n    /// @param tokenIds is an array of tokenId of CDHNFT\\n    /// @param _battleId is unique battle in which the NFT will be staked\\n    /// @dev it calls internalStake function for further processing\\n    function stakeTokens(uint256[] memory tokenIds, string memory _battleId) external override {\\n        require(validStakeCount(tokenIds), \\\"WBB: Max tokens staked.\\\");\\n        address player = _msgSender();\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            internalStake(player, tokenIds[i], _battleId);\\n        }\\n    }\\n\\n    /// @notice function to get the tokenId of a user that staked\\n    /// @param _player is the user address\\n    function getStakedTokensFor(address _player) public view returns (uint256[] memory tokenIds) {\\n        return stakers[_player].tokenIds;\\n    }\\n\\n    // /// @notice function to get the stakedToken\\n    // function getStakedTokensForWithBattleId(address _player, string memory _battleId) checkStatusOfBattle(_battleId) public view returns (uint256[] memory tokenIds){\\n    //     return stakers[_player].tokenIds;\\n    // }\\n\\n    // function getStakedTokens() external view returns (uint256[] memory tokenIds){\\n    //     return getStakedTokensFor(_msgSender());\\n    // }\\n\\n    /// @notice public function to unstake a single CDHNFT that sender owns\\n    /// @param _tokenId is tokenId of CDHNFT\\n    /// @param _battleId is unique battle in which the NFT will be unstaked\\n    /// @dev it calls internalUnStake function for further processing\\n    function unstake(uint256 _tokenId, string memory _battleId) external override {\\n        require(tokenOwner[_tokenId] == _msgSender(), \\\"WBB: Unauthorized.\\\");\\n        internalUnstake(_msgSender(), _tokenId, _battleId);\\n    }\\n\\n    /// @notice public function to unstake all  CDHNFT that sender owns\\n    /// @param _battleId is unique battle in which the NFT will be unstaked\\n    /// @dev it calls internalUnStakeAll function for further processing\\n    function unstakeAll(string memory _battleId) external override {\\n        internalUnstakeAll(_msgSender(), _battleId);\\n    }\\n\\n    /// @notice public function to unstake an array of  CDHNFT that sender owns\\n    /// @param tokenIds is tokenId of CDHNFT\\n    /// @param _battleId is unique battle in which the NFT will be unstaked\\n    /// @dev it calls internalUnStake function for further processing\\n    function unstakeTokens(uint256[] memory tokenIds, string memory _battleId) external override {\\n        address player = _msgSender();\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            internalUnstake(player, tokenIds[i], _battleId);\\n        }\\n    }\\n\\n    ///  @notice internal methods for staking operations\\n    /// @param _nftCount how many nft user have\\n    /// @param _balance user tower token balance\\n    /// @return true if he has higher tower token balance than required\\n    function checkRequiredTokenBalance(uint256 _nftCount, uint256 _balance) public pure returns (bool) {\\n        uint256 requiredBalance = (_nftCount * 100) * 10 ** 18;\\n        // console.log( _balance >= requiredBalance);\\n        return _balance >= requiredBalance;\\n    }\\n\\n    /// @notice to set the cooldown period\\n    /// @param time in unix\\n    /// @return time\\n    function setCoolDownPeriod(uint256 time) external returns (uint256) {\\n        require(accessControls.isAuthorized(msg.sender), \\\"WBB: Unauthorized\\\");\\n        cooldownPeriod = time;\\n        return cooldownPeriod;\\n    }\\n\\n    /// @notice internal function where actual staking works\\n    /// @param _player is address of a user\\n    /// @param _tokenId is tokenid that user have\\n    /// @param _battleId in which the token id will be staked\\n\\n    /// TODO : check if boss or battle is active or not\\n    function internalStake(address _player, uint256 _tokenId, string memory _battleId) internal {\\n        require(wbbActions.checksBattleStatus(_battleId), \\\"WBB: battle not created\\\");\\n        require(wbbActions.checkBattleEnded(_battleId) == false, \\\"WBB: battle ended\\\");\\n\\n        TokenStaker storage staker = stakers[_player];\\n\\n        uint256[] storage existingStakedTokens = stakers[_player].tokenIds;\\n        uint256 existingStakedTokensCount = existingStakedTokens.length;\\n\\n        uint256 towerBalance = towerToken.balanceOf(_player);\\n\\n        if (checkRequiredTokenBalance(existingStakedTokensCount + 1, towerBalance)) {\\n            staker.balance = towerBalance;\\n            staker.tokenIds.push(_tokenId);\\n            staker.tokenIndex[_tokenId] = staker.tokenIds.length - 1;\\n            tokenOwner[_tokenId] = _player;\\n            staker.stakedTokenTime[_tokenId] = block.timestamp;\\n            ICDHNFTInventory(cdhNFT).safeTransferFrom(_player, nftHolder, _tokenId, 1, \\\"0x\\\");\\n\\n            //mapping players address\\n            tokenToBattleId[_tokenId] = _battleId;\\n\\n            emit NFTStaked(_player, _tokenId, _battleId, block.timestamp);\\n\\n            //if its the first time in the mapping that will be denoted by index, it will push into the array for first time if its not it will increase the counter value\\n            if (mappingArray[_player][\\\"index\\\"] == 0) {\\n                stakersAddress.push(_player);\\n                for (uint256 i = 0; i < stakersAddress.length - 1; i++) {\\n                    console.log(\\\"all ofstakersAddress:\\\", stakersAddress[i]);\\n                }\\n                mappingArray[_player][\\\"index\\\"] = stakersAddress.length;\\n                mappingArray[_player][\\\"count\\\"] = 1;\\n            }\\n            mappingArray[_player][\\\"count\\\"]++;\\n            //else\\n        } else {\\n            revert(\\\"Not enough Tower Tokens.\\\");\\n        }\\n    }\\n\\n    /// @notice internal function where actual staking works but in this all the tokenID  of a user will be staked\\n    /// @param _player is address of a user\\n    /// @param _battleId in which the token id will be staked\\n    /*function internalStakeAll(address _player, string memory _battleId) internal {\\n        uint256[] memory allTokens = cdhNFT.getAllTokens(_player);\\n        uint256 nftBalance = allTokens.length;\\n        if (nftBalance > 0) {\\n            for (uint i = 0; i < nftBalance; i++) {\\n                internalStake(_player, allTokens[i], _battleId);\\n            }\\n        }\\n    }*/\\n\\n    /// @notice internal function where staking of an arraytokenID will be present\\n    /// @param _player is address of a user\\n    /// @param _tokenIds is an array tokenid that user have\\n    /// @param _battleId in which the token id will be staked\\n    function internalStakeBatch(address _player, uint256[] memory _tokenIds, string memory _battleId) internal {\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            internalStake(_player, _tokenIds[i], _battleId);\\n        }\\n    }\\n\\n    /// @notice internal function where actual unstaking works\\n    /// @param _player is address of a user\\n    /// @param _tokenId is tokenid that user staked\\n    /// @param _battleId in which the token id will be unstaked\\n    function internalUnstake(address _player, uint256 _tokenId, string memory _battleId) internal {\\n        require(wbbActions.checksBattleStatus(_battleId) == true, \\\"NFTStaking: battle not created\\\");\\n\\n        TokenStaker storage staker = stakers[_player];\\n\\n        (, uint256 endTime) = wbbActions.getBattlePeriod(_battleId);\\n        require(block.timestamp > staker.stakedTokenTime[_tokenId] || block.timestamp > endTime, \\\"NFTUnStaking: cooldown not over\\\");\\n\\n        uint256 lastIndex = staker.tokenIds.length - 1;\\n        uint256 lastIndexKey = staker.tokenIds[lastIndex];\\n\\n        uint256 tokenIdIndex = staker.tokenIndex[_tokenId];\\n\\n        staker.tokenIds[tokenIdIndex] = lastIndexKey;\\n        staker.tokenIndex[lastIndexKey] = tokenIdIndex;\\n        staker.stakedTokenTime[_tokenId] = 0;\\n\\n        if (staker.tokenIds.length > 0) {\\n            staker.tokenIds.pop();\\n            delete staker.tokenIndex[_tokenId];\\n        }\\n        ICDHNFTInventory(cdhNFT).safeTransferFrom(nftHolder, _player, _tokenId, 1, \\\"0x\\\");\\n        emit NFTUnstaked(_player, _tokenId, _battleId);\\n        // delete mapping\\n        delete tokenToBattleId[_tokenId];\\n\\n        //delete from mapping of mappingArray by checking count status\\n        if (mappingArray[_player][\\\"index\\\"] == 0) {\\n            console.log(\\\"not found\\\");\\n        } else {\\n            uint256 count = mappingArray[_player][\\\"count\\\"];\\n            if (count == 1) {\\n                uint256 index = mappingArray[_player][\\\"index\\\"];\\n                mappingArray[_player][\\\"index\\\"] = 0;\\n                mappingArray[_player][\\\"count\\\"] = 0;\\n                address popedAddress = stakersAddress[stakersAddress.length - 1];\\n                stakersAddress.pop();\\n                stakersAddress[index - 1] = popedAddress;\\n                mappingArray[popedAddress][\\\"index\\\"] = index;\\n            } else {\\n                mappingArray[_player][\\\"count\\\"]--;\\n            }\\n        }\\n        for (uint256 i = 0; i < staker.tokenIds.length; i++) {\\n            console.log(\\\"tokendId Stored:\\\", staker.tokenIds[i]);\\n        }\\n\\n        for (uint256 i = 0; i < stakersAddress.length - 1; i++) {\\n            console.log(\\\"all ofstakersAddress:\\\", stakersAddress[i]);\\n        }\\n\\n        // console.log(\\\"index of stakerAddress: \\\",mappingArray[_player][\\\"index\\\"]);\\n        // console.log(\\\"count of stakerAddress: \\\", mappingArray[_player][\\\"count\\\"]);\\n    }\\n\\n    /// @notice internal function where unstaking of all tokenID user have works\\n    /// @param _player is address of a user\\n    /// @param _battleId in which the token id will be unstaked\\n    function internalUnstakeAll(address _player, string memory _battleId) internal {\\n        uint256[] memory allTokens = cdhNFT.getAllTokens(_player);\\n        uint256 nftCounts = allTokens.length;\\n        if (nftCounts > 0) {\\n            for (uint i = 0; i < nftCounts; i++) {\\n                internalUnstake(_player, allTokens[i], _battleId);\\n            }\\n        }\\n    }\\n\\n    /// @notice internal function where unstaking works for batch\\n    /// @param _player is address of a user\\n    /// @param _tokenIds is tokenid that user have\\n    /// @param _battleId in which the token id will be unstaked\\n    function internalUnstakeBatch(address _player, uint256[] memory _tokenIds, string memory _battleId) internal {\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            if (tokenOwner[_tokenIds[i]] == msg.sender) {\\n                internalUnstake(_player, _tokenIds[i], _battleId);\\n            }\\n        }\\n    }\\n\\n    /// @notice internal function where actual restaking works\\n    /// @param _player is address of a user\\n    /// @param _tokenId is tokenid that user have\\n    /// @param _battleId in which the token id will be restaked\\n    function internalRestake(address _player, uint256 _tokenId, string memory _battleId) internal {\\n        require(wbbActions.checksBattleStatus(_battleId) == true, \\\"NFTStaking: battle not created\\\");\\n        require(tokenOwner[_tokenId] == _player, \\\"NFTStaking: Unauthorized.\\\");\\n        require(tokenOwner[_tokenId] != address(0x0), \\\"NFTStaking: Token Id not staked\\\");\\n        require(!wbbActions.checkBattleEnded(_battleId), \\\"NFTStaking: battle ended\\\");\\n\\n        TokenStaker storage staker = stakers[_player];\\n        staker.stakedTokenTime[_tokenId] = block.timestamp;\\n        emit NFTRestaked(_player, _tokenId, _battleId, staker.stakedTokenTime[_tokenId]);\\n    }\\n\\n    /// @notice  function where  restaking works\\n    /// @param _tokenId is tokenid that user have\\n    /// @param _battleId in which the token id will be restaked\\n    function restake(uint256 _tokenId, string memory _battleId) external {\\n        internalRestake(_msgSender(), _tokenId, _battleId);\\n    }\\n\\n    /// @notice  function where restakeAll works\\n    /// @param _battleId in which the token id will be restaked\\n    function restakeAll(string memory _battleId) external {\\n        address player = _msgSender();\\n        uint256[] memory allTokens = cdhNFT.getAllTokens(player);\\n        uint256 nftCounts = allTokens.length;\\n        if (nftCounts > 0) {\\n            for (uint i = 0; i < nftCounts; i++) {\\n                this.restake(allTokens[i], _battleId);\\n            }\\n        }\\n    }\\n\\n    /// @notice  function where  restakeTokens works\\n    /// @param _tokenIds is tokenid that user have staked\\n    /// @param _battleId in which the token id will be restaked\\n    function restakeTokens(uint256[] memory _tokenIds, string memory _battleId) external {\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            internalRestake(_msgSender(), _tokenIds[i], _battleId);\\n        }\\n    }\\n\\n    /// @notice  function where user can stake without battleId\\n    /// @param _tokenId is tokenid that user are about to stake\\n    function stakeWithoutBattleId(uint256 _tokenId) external {\\n        internalStake(_msgSender(), _tokenId, latestBattle());\\n    }\\n\\n    /// @notice  function where user can stake all NFT without battleId\\n    function stakeAllWithoutBattleId() external {\\n        uint256[] memory allTokens = cdhNFT.getAllTokens(_msgSender());\\n        uint256 nftBalance = allTokens.length;\\n        if (nftBalance > 0) {\\n            for (uint i = 0; i < nftBalance; i++) {\\n                internalStake(_msgSender(), allTokens[i], latestBattle());\\n            }\\n        }\\n    }\\n\\n    /// @notice function to stake an array of token without battleID\\n    /// @param _tokenIds an array of NFT\\n    function stakeTokensWithoutBattleId(uint256[] memory _tokenIds) external {\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            internalStake(msg.sender, _tokenIds[i], latestBattle());\\n        }\\n    }\\n\\n    /// @notice  function where user can restake without battleId\\n    /// @param _tokenId is tokenid that user are about to stake\\n    function restakeWithoutBattleId(uint256 _tokenId) external override {\\n        internalRestake(_msgSender(), _tokenId, latestBattle());\\n    }\\n\\n    /// @notice  function where user can restake an array without battleId\\n    /// @param _tokenIds is tokenid that user are about to stake\\n    function restakeTokensWithoutBattleId(uint256[] memory _tokenIds) external override {\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            internalRestake(_msgSender(), _tokenIds[i], latestBattle());\\n        }\\n    }\\n\\n    /// @notice  function where user can restakeAll without battleId\\n    function restakeAllWithoutBattleId() external override {\\n        uint256[] memory allTokens = cdhNFT.getAllTokens(msg.sender);\\n        uint256 nftCounts = allTokens.length;\\n        if (nftCounts > 0) {\\n            for (uint i = 0; i < nftCounts; i++) {\\n                this.restake(allTokens[i], latestBattle());\\n            }\\n        }\\n    }\\n\\n    /// @notice function to see user stakedTokenTime\\n    /// @param _player user address\\n    /// @param _tokenId token id which he staked\\n    function toReturnStakedTokenTime(address _player, uint256 _tokenId) public view returns (uint256) {\\n        TokenStaker storage staker = stakers[_player];\\n        return staker.stakedTokenTime[_tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xc48d8369950744e5e11cd00776f8e757f8d252f07a78a98696b43a4596e081a1\",\"license\":\"MIT\"},\"contracts/game/interfaces/GameStakeOps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title A interface of worldBattleBoss contract\\n/// @notice this interface is used in main contract\\n/// @dev all the funtion present here might be overridden\\ninterface GameStakeOps {\\n    function stake(uint256 _tokenId, string memory _battleId) external;\\n//    function stakeAll(string memory _battleId) external;\\n    function stakeTokens(uint256[] memory _tokenIds,string memory _battleId) external;\\n\\n    function unstake(uint256 _tokenId, string memory _battleId) external;\\n    function unstakeAll(string memory _battleId) external;\\n    function unstakeTokens(uint256[] memory _tokenIds, string memory _battleId) external;\\n\\n    function restake(uint256 _tokenId, string memory _battleId) external;\\n    function restakeAll(string memory _battleId) external;\\n    function restakeTokens(uint256[] memory _tokenIds, string memory _battleId) external;\\n\\n    function stakeWithoutBattleId(uint256 _tokenId) external;\\n    function stakeAllWithoutBattleId() external;\\n    function stakeTokensWithoutBattleId(uint256[] memory _tokenIds) external;\\n\\n    function restakeWithoutBattleId(uint256 _tokenId) external;\\n    function restakeAllWithoutBattleId() external;\\n    function restakeTokensWithoutBattleId(uint256[] memory _tokenIds) external;\\n}\\n\\n\",\"keccak256\":\"0xf0f662ff4a99cc26471d0b0e838ac0872c57a00b1cf829121ef2fea6d7483320\",\"license\":\"MIT\"},\"contracts/game/interfaces/ICDHNFTInventory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n\\n/// @title A interface of CDH Inventory NFT \\n/// @notice this is used to help interact with real CDH Inventory \\ninterface ICDHNFTInventory {\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function getAllTokens(address user) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xaac4cc604a6a0d455bc0146af2a0cf3c9a5d2039d359b5bf3f8f2f97274d219d\",\"license\":\"MIT\"},\"contracts/game/interfaces/ITOWER.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title A interface of CDH Tower token \\n/// @notice this is used to help interact with real tower token \\ninterface ITOWER {\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaaf586c6781d8176e9da745515d111afa2c530f2d0fe3464972abd42810da0cc\",\"license\":\"MIT\"},\"contracts/game/interfaces/IWBBActions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title A interface of WorldBattleBoss Actions contract\\n/// @notice this interface is used for interface of Actions to use in WBB main contract\\ninterface IWBBActions {\\n    function checkBattleExists(string memory _battleId) external view returns (bool);\\n    function setBattleStatus(string memory _battleId, bool _status) external;\\n    function createBattle(string memory _battleId, string[] memory _bossIds, uint256 _startTime, uint256 _endTime) external;\\n    function updateBattle(string memory _battleId, uint256 _startTime, uint256 _endTime) external;\\n    function checksBattleStatus(string memory _battleId) external view returns (bool);\\n    function checkBattleEnded(string memory _battleId) external view returns (bool);\\n    function getBattlePeriod(string memory _battleId) external view returns (uint256 startTime, uint256 endTime);\\n    function getLatestBattle() external view returns (string memory battleId);\\n\\n    function checkBossExists(string memory _bossId) external view returns (bool);\\n    function setBossStatus(string memory _bossId, bool _status) external;\\n    function checkActiveBosses(string[] memory _bossId) external;\\n    function checkBossStatus(string memory _bossId) external view returns (bool);\\n    function newBoss(string memory bossId, string memory name, uint256 maxHp, string memory uri) external;\\n    function updateBoss(string memory bossId, string memory name, uint256 maxHp, string memory uri) external;\\n}\\n\\n\",\"keccak256\":\"0x2d4653af1da31a0b44efd215de3b570dcde0c3488a0799cdc86a7113fd6c58a9\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614a8f806100206000396000f3fe608060405234801561001057600080fd5b506004361061034c5760003560e01c8063748365ef116101bd578063b345b8c0116100f9578063c60b6c68116100a2578063e481e0a81161007c578063e481e0a814610841578063e7e4e1f714610849578063f2fde38b1461085c578063f9c6c0011461086f57600080fd5b8063c60b6c6814610812578063d2bd85d614610825578063d7c15bf61461083857600080fd5b8063c38c2df7116100d3578063c38c2df7146107cc578063c46d0c93146107ec578063c49d30b2146107ff57600080fd5b8063b345b8c01461076a578063b4dce1311461077d578063c23870ec146107c457600080fd5b80639b6c268211610166578063a90d866711610140578063a90d866714610729578063ab5dc6851461073c578063ad53fdbc1461074f578063aed885401461076257600080fd5b80639b6c2682146106ed5780639e8ccaf114610700578063a8bc29a61461072057600080fd5b80639168ae72116101975780639168ae721461069357806395fbf3a9146106d2578063987ad0ba146106da57600080fd5b8063748365ef146106425780638da5cb5b146106625780638e6622fb1461068057600080fd5b806328fb77451161028c578063576ee2441161023557806369d47dd81161020f57806369d47dd8146105b25780636c19e783146105d2578063715018a614610627578063736f616b1461062f57600080fd5b8063576ee244146105435780636064fcc81461057f57806367f134a01461059f57600080fd5b8063366b19ae11610266578063366b19ae146104eb578063431a1b97146105025780634ed148181461053057600080fd5b806328fb7745146104a55780632ac34bc1146104b85780632e4723fd146104cb57600080fd5b80630eaf43f2116102f95780631caaa487116102d35780631caaa487146104295780631e5943e31461045f5780632056c16014610472578063258ae5821461049257600080fd5b80630eaf43f2146103be5780630f075b78146103d15780631b48ba07146103e457600080fd5b80630422ddf31161032a5780630422ddf31461039657806306f809fb146103a35780630c0ef2b0146103b657600080fd5b806302852b49146103515780630386937a1461035b5780630421af781461036e575b600080fd5b610359610882565b005b610359610369366004613fa0565b610a07565b61038161037c366004613fb9565b610a1c565b60405190151581526020015b60405180910390f35b6074546103819060ff1681565b6103816103b136600461417f565b610a49565b610359610bce565b6103596103cc36600461420e565b610c3d565b6103596103df366004613fa0565b610e91565b606a546104049073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161038d565b610404610437366004613fa0565b60716020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61038161046d36600461429b565b610ea3565b6104856104803660046142d8565b610ebd565b60405161038d9190614330565b6103816104a0366004614343565b610f36565b6104856104b33660046142d8565b610fd5565b6103596104c636600461438a565b611097565b6104de6104d9366004613fa0565b61114f565b60405161038d9190614452565b336000908152606660205260409020541515610381565b6105226105103660046142d8565b60666020526000908152604090205481565b60405190815260200161038d565b61035961053e3660046142d8565b6111e9565b610522610551366004614465565b606f602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b606c546104049073ffffffffffffffffffffffffffffffffffffffff1681565b6103596105ad366004614343565b611328565b6105226105c03660046142d8565b60676020526000908152604090205481565b6103596105e03660046142d8565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610359611337565b61052261063d366004613fa0565b611349565b606b546104049073ffffffffffffffffffffffffffffffffffffffff1681565b60335473ffffffffffffffffffffffffffffffffffffffff16610404565b61035961068e36600461449f565b61144b565b6106bd6106a13660046142d8565b6070602052600090815260409020600281015460039091015482565b6040805192835260208301919091520161038d565b6104de6115c0565b6103596106e836600461429b565b61167b565b6103596106fb366004613fa0565b6116bf565b6068546104049073ffffffffffffffffffffffffffffffffffffffff1681565b610522606d5481565b610359610737366004614343565b6117bc565b61035961074a36600461438a565b611854565b61035961075d36600461438a565b611897565b6103596118de565b6103596107783660046142d8565b611a49565b61052261078b3660046144d4565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260706020908152604080832093835260049093019052205490565b610359611c6c565b6069546104049073ffffffffffffffffffffffffffffffffffffffff1681565b6103596107fa3660046142d8565b611d7b565b61052261080d3660046142d8565b611f37565b6103596108203660046142d8565b61201e565b61035961083336600461449f565b6121da565b61052260755481565b6103816121e4565b610359610857366004614343565b61221d565b61035961086a3660046142d8565b612228565b61035961087d36600461429b565b6122dc565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa1580156108f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109149190614500565b61097f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064015b60405180910390fd5b6074805460ff808216157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090921682179092557f5c198fffee97c54ce21fb3966c0158a0e94681cabb57e72da2840248401344bf91163360408051921515835273ffffffffffffffffffffffffffffffffffffffff90911660208301520160405180910390a1565b610a193382610a146115c0565b612320565b50565b600080610a2a846064614551565b610a3c90670de0b6b3a7640000614551565b8310159150505b92915050565b33600081815260666020526040812054909190848114610ac5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f576f726c64426174746c653a2053657373696f6e20686173206368616e6765646044820152606401610976565b6000610ad28684876126b9565b9050610ade8188610f36565b610b44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f576f726c64426174746c653a20436f756c646e2774205665726966792e0000006044820152606401610976565b6000610b4f846126ef565b73ffffffffffffffffffffffffffffffffffffffff85166000818152606660209081526040808320859055606782529182902042905581518b815290810184905292935090917ff977e7d4096cc35c20f46a1c7160bf678955959f7f0bf364c3d8130207f0e1d6910160405180910390a2506001979650505050505050565b60745460ff1615610c3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5742423a2047616d65206e6f74206163746976650000000000000000000000006044820152606401610976565b565b600054610100900460ff1615808015610c5d5750600054600160ff909116105b80610c775750303b158015610c77575060005460ff166001145b610d03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610976565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610d6157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b606880547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8b8116919091179092556069805482168a8416179055606c80548216898416179055606a80548216868416179055606b8054821685841617905542606d55600a607555607480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560658054909116918716919091179055610e2461275e565b8015610e8757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b610a193382610e9e6115c0565b6127f5565b600060755482516001610eb69190614568565b1092915050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260706020908152604091829020805483518184028101840190945280845260609392830182828015610f2a57602002820191906000526020600020905b815481526020019060010190808311610f16575b50505050509050919050565b600080610f90846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b60655490915073ffffffffffffffffffffffffffffffffffffffff16610fb68285612f70565b73ffffffffffffffffffffffffffffffffffffffff1614949350505050565b6068546040517f178b6de600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260609260009291169063178b6de690602401600060405180830381865afa15801561104a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611090919081019061457b565b9392505050565b6110a082610ea3565b611106576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a204d617820746f6b656e73207374616b65642e0000000000000000006044820152606401610976565b3360005b835181101561114957611137828583815181106111295761112961460c565b6020026020010151856127f5565b806111418161463b565b91505061110a565b50505050565b6072602052600090815260409020805461116890614673565b80601f016020809104026020016040519081016040528092919081815260200182805461119490614673565b80156111e15780601f106111b6576101008083540402835291602001916111e1565b820191906000526020600020905b8154815290600101906020018083116111c457829003601f168201915b505050505081565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b9190614500565b6112e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a65640000000000000000000000000000006044820152606401610976565b606c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611333338383612320565b5050565b61133f612f94565b610c3b6000613015565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff169063fe9fbb8090602401602060405180830381865afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc9190614500565b611442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a65640000000000000000000000000000006044820152606401610976565b50607381905590565b6000336068546040517f178b6de600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301529293506000929091169063178b6de690602401600060405180830381865afa1580156114c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261150a919081019061457b565b805190915080156111495760005b818110156115b9573073ffffffffffffffffffffffffffffffffffffffff166367f134a084838151811061154e5761154e61460c565b6020026020010151876040518363ffffffff1660e01b81526004016115749291906146c6565b600060405180830381600087803b15801561158e57600080fd5b505af11580156115a2573d6000803e3d6000fd5b5050505080806115b19061463b565b915050611518565b5050505050565b606a54604080517fbf81ee6d000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163bf81ee6d9160048083019260009291908290030181865afa158015611630573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261167691908101906146df565b905090565b60005b8151811015611333576116ad3383838151811061169d5761169d61460c565b6020026020010151610e9e6115c0565b806116b78161463b565b91505061167e565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa15801561172d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117519190614500565b6117b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a65640000000000000000000000000000006044820152606401610976565b607555565b60008281526071602052604090205473ffffffffffffffffffffffffffffffffffffffff163314611849576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5742423a20556e617574686f72697a65642e00000000000000000000000000006044820152606401610976565b61133333838361308c565b3360005b835181101561114957611885828583815181106118775761187761460c565b60200260200101518561308c565b8061188f8161463b565b915050611858565b60005b82518110156118d9576118c7338483815181106118b9576118b961460c565b602002602001015184612320565b806118d18161463b565b91505061189a565b505050565b6068546040517f178b6de600000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff169063178b6de690602401600060405180830381865afa15801561194d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611993919081019061457b565b805190915080156113335760005b818110156118d9573073ffffffffffffffffffffffffffffffffffffffff166367f134a08483815181106119d7576119d761460c565b60200260200101516119e76115c0565b6040518363ffffffff1660e01b8152600401611a049291906146c6565b600060405180830381600087803b158015611a1e57600080fd5b505af1158015611a32573d6000803e3d6000fd5b505050508080611a419061463b565b9150506119a1565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa158015611ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adb9190614500565b611b41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a65640000000000000000000000000000006044820152606401610976565b73ffffffffffffffffffffffffffffffffffffffff8116611bbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5742423a20496e76616c6964204e465420636f6e7472616374000000000000006044820152606401610976565b60685473ffffffffffffffffffffffffffffffffffffffff82811691167fcc84b7dfa78b34bb94bda9e3e859b03781c64e9c8870f014f905deb5917d1e343360405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a3606880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60685460009073ffffffffffffffffffffffffffffffffffffffff1663178b6de6336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401600060405180830381865afa158015611cf7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611d3d919081019061457b565b805190915080156113335760005b818110156118d957611d693384838151811061169d5761169d61460c565b80611d738161463b565b915050611d4b565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa158015611de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0d9190614500565b611e73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a65640000000000000000000000000000006044820152606401610976565b73ffffffffffffffffffffffffffffffffffffffff8116611ef0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5742423a20496e76616c696420416374696f6e7320636f6e74726163740000006044820152606401610976565b606a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260666020526040812054808203610a43576040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b166020820152436034820152611090906054015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa15801561208c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b09190614500565b612116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a65640000000000000000000000000000006044820152606401610976565b73ffffffffffffffffffffffffffffffffffffffff8116612193576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5742423a20496e76616c696420746f6b656e20616464726573730000000000006044820152606401610976565b606980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610a19338261399a565b6000336121f0816126ef565b73ffffffffffffffffffffffffffffffffffffffff90911660009081526066602052604090205550600190565b6113333383836127f5565b612230612f94565b73ffffffffffffffffffffffffffffffffffffffff81166122d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610976565b610a1981613015565b60005b81518110156113335761230e338383815181106122fe576122fe61460c565b6020026020010151610a146115c0565b806123188161463b565b9150506122df565b606a546040517f2af2677a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632af2677a90612376908490600401614452565b602060405180830381865afa158015612393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b79190614500565b1515600114612422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e46545374616b696e673a20626174746c65206e6f74206372656174656400006044820152606401610976565b60008281526071602052604090205473ffffffffffffffffffffffffffffffffffffffff8481169116146124b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4e46545374616b696e673a20556e617574686f72697a65642e000000000000006044820152606401610976565b60008281526071602052604090205473ffffffffffffffffffffffffffffffffffffffff1661253d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e46545374616b696e673a20546f6b656e204964206e6f74207374616b6564006044820152606401610976565b606a546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90612593908490600401614452565b602060405180830381865afa1580156125b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d49190614500565b1561263b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e46545374616b696e673a20626174746c6520656e64656400000000000000006044820152606401610976565b73ffffffffffffffffffffffffffffffffffffffff831660008181526070602090815260408083208684526004810190925291829020429081905591519092917f426eb4f62756d59893dffae42e39f4a32ec6d17cab2605ed0e8b6e1891c241be916126ab918791879190614756565b60405180910390a250505050565b60008383836040516020016126d09392919061477f565b6040516020818303038152906040528051906020012090509392505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526066602090815260408083205490517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16928101929092526034820152436054820152610a4390607401611fa0565b600054610100900460ff16610c3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610976565b606a546040517f2af2677a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632af2677a9061284b908490600401614452565b602060405180830381865afa158015612868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288c9190614500565b6128f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a20626174746c65206e6f7420637265617465640000000000000000006044820152606401610976565b606a546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90612948908490600401614452565b602060405180830381865afa158015612965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129899190614500565b156129f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20626174746c6520656e6465640000000000000000000000000000006044820152606401610976565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260706020526040808220805460695492517f70a0823100000000000000000000000000000000000000000000000000000000815260048101959095529094859491939216906370a0823190602401602060405180830381865afa158015612a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9c91906147b4565b9050612ab2612aac836001614568565b82610a1c565b15612f0557600284018190558354600181810186556000868152602090209091018790558454612ae291906147cd565b6000878152600186810160209081526040808420949094556071815283832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8d81169182179092556004808b0190935293859020429055606854606c5495517ff242432a000000000000000000000000000000000000000000000000000000008152928301949094529384166024820152604481018a9052606481019190915260a06084820152600260a48201527f307800000000000000000000000000000000000000000000000000000000000060c482015291169063f242432a9060e401600060405180830381600087803b158015612bf557600080fd5b505af1158015612c09573d6000803e3d6000fd5b50505060008781526072602052604090209050612c26868261482e565b508673ffffffffffffffffffffffffffffffffffffffff167fa2a4b640524f5410a2969ac3f90a5c7a3197662d845ba3bdf16fe9010e5aad9a878742604051612c7193929190614756565b60405180910390a273ffffffffffffffffffffffffffffffffffffffff87166000908152606f60205260409081902090517f696e6465780000000000000000000000000000000000000000000000000000008152600501908152602001604051809103902054600003612e8f57606e805460018101825560009182527f9930d9ff0dee0ef5ca2f7710ea66b8f84dd0f5f5351ecffe72b952cd9db7142a0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a161790555b606e54612d5d906001906147cd565b811015612de957612dd76040518060400160405280601581526020017f616c6c206f667374616b657273416464726573733a0000000000000000000000815250606e8381548110612db057612db061460c565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16613a9d565b80612de18161463b565b915050612d4e565b50606e5473ffffffffffffffffffffffffffffffffffffffff88166000818152606f6020818152604080842081517f696e646578000000000000000000000000000000000000000000000000000000815260058082018390528351602592819003830181209990995596909552929091527f636f756e74000000000000000000000000000000000000000000000000000000855292840152905191829003019020600190555b73ffffffffffffffffffffffffffffffffffffffff87166000908152606f60205260409081902090517f636f756e7400000000000000000000000000000000000000000000000000000081526005019081526040519081900360200190208054906000612efb8361463b565b9190505550612f67565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f7420656e6f75676820546f77657220546f6b656e732e00000000000000006044820152606401610976565b50505050505050565b6000806000612f7f8585613b2e565b91509150612f8c81613b73565b509392505050565b60335473ffffffffffffffffffffffffffffffffffffffff163314610c3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610976565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606a546040517f2af2677a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632af2677a906130e2908490600401614452565b602060405180830381865afa1580156130ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131239190614500565b151560011461318e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e46545374616b696e673a20626174746c65206e6f74206372656174656400006044820152606401610976565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260706020526040808220606a5491517f32165c3c000000000000000000000000000000000000000000000000000000008152909391909116906332165c3c906131f8908690600401614452565b6040805180830381865afa158015613214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132389190614948565b6000868152600485016020526040902054909250421190508061325a57508042115b6132c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e4654556e5374616b696e673a20636f6f6c646f776e206e6f74206f766572006044820152606401610976565b81546000906132d1906001906147cd565b905060008360000182815481106132ea576132ea61460c565b906000526020600020015490506000846001016000888152602001908152602001600020549050818560000182815481106133275761332761460c565b6000918252602080832090910192909255838152600187018252604080822084905589825260048801909252908120558454156133b757845485908061336f5761336f61496c565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810183905590920190925588825260018701905260408120555b606854606c546040517ff242432a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201528a82166024820152604481018a90526001606482015260a06084820152600260a48201527f307800000000000000000000000000000000000000000000000000000000000060c482015291169063f242432a9060e401600060405180830381600087803b15801561347057600080fd5b505af1158015613484573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff167fcdc644f7a40cb5d51e46e25428f724a3e15ae38f01d0e83c3c863f51719004db88886040516134d09291906146c6565b60405180910390a260008781526072602052604081206134ef91613f52565b73ffffffffffffffffffffffffffffffffffffffff88166000908152606f60205260409081902090517f696e6465780000000000000000000000000000000000000000000000000000008152600501908152602001604051809103902054600003613597576135926040518060400160405280600981526020017f6e6f7420666f756e640000000000000000000000000000000000000000000000815250613d26565b61389b565b73ffffffffffffffffffffffffffffffffffffffff88166000908152606f602052604080822090517f636f756e7400000000000000000000000000000000000000000000000000000081526005019081526020016040518091039020549050806001036138275773ffffffffffffffffffffffffffffffffffffffff89166000818152606f6020818152604080842081517f696e6465780000000000000000000000000000000000000000000000000000008082526005808301849052845160259381900384018120548a8a5288885292815280820185905285519081900384018120899055988852959094527f636f756e740000000000000000000000000000000000000000000000000000008752938601525193849003909101909220819055606e80546136c9906001906147cd565b815481106136d9576136d961460c565b600091825260209091200154606e805473ffffffffffffffffffffffffffffffffffffffff909216925090806137115761371161496c565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905580606e6137776001856147cd565b815481106137875761378761460c565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790559183168152606f90915260409081902090517f696e646578000000000000000000000000000000000000000000000000000000815283919060050190815260405190819003602001902055506138999050565b73ffffffffffffffffffffffffffffffffffffffff89166000908152606f60205260409081902090517f636f756e74000000000000000000000000000000000000000000000000000000815260050190815260405190819003602001902080549060006138938361499b565b91905055505b505b60005b8554811015613917576139056040518060400160405280601081526020017f746f6b656e6449642053746f7265643a000000000000000000000000000000008152508760000183815481106138f5576138f561460c565b9060005260206000200154613db5565b8061390f8161463b565b91505061389e565b5060005b606e5461392a906001906147cd565b81101561398f5761397d6040518060400160405280601581526020017f616c6c206f667374616b657273416464726573733a0000000000000000000000815250606e8381548110612db057612db061460c565b806139878161463b565b91505061391b565b505050505050505050565b6068546040517f178b6de600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600092169063178b6de690602401600060405180830381865afa158015613a0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613a51919081019061457b565b805190915080156111495760005b818110156115b957613a8b85848381518110613a7d57613a7d61460c565b60200260200101518661308c565b80613a958161463b565b915050613a5f565b6113338282604051602401613ab39291906149d0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f319af33300000000000000000000000000000000000000000000000000000000179052613e42565b6000808251604103613b645760208301516040840151606085015160001a613b5887828585613e63565b94509450505050613b6c565b506000905060025b9250929050565b6000816004811115613b8757613b87614a08565b03613b8f5750565b6001816004811115613ba357613ba3614a08565b03613c0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610976565b6002816004811115613c1e57613c1e614a08565b03613c85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610976565b6003816004811115613c9957613c99614a08565b03610a19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610976565b610a1981604051602401613d3a9190614452565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052613e42565b6113338282604051602401613dcb929190614a37565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc000000000000000000000000000000000000000000000000000000001790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613e9a5750600090506003613f49565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613eee573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116613f4257600060019250925050613f49565b9150600090505b94509492505050565b508054613f5e90614673565b6000825580601f10613f6e575050565b601f016020900490600052602060002090810190610a1991905b80821115613f9c5760008155600101613f88565b5090565b600060208284031215613fb257600080fd5b5035919050565b60008060408385031215613fcc57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561405157614051613fdb565b604052919050565b600067ffffffffffffffff82111561407357614073613fdb565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126140b057600080fd5b81356140c36140be82614059565b61400a565b8181528460208386010111156140d857600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff82111561410f5761410f613fdb565b5060051b60200190565b600082601f83011261412a57600080fd5b8135602061413a6140be836140f5565b82815260059290921b8401810191818101908684111561415957600080fd5b8286015b84811015614174578035835291830191830161415d565b509695505050505050565b60008060006060848603121561419457600080fd5b833567ffffffffffffffff808211156141ac57600080fd5b6141b88783880161409f565b94506020860135935060408601359150808211156141d557600080fd5b506141e286828701614119565b9150509250925092565b73ffffffffffffffffffffffffffffffffffffffff81168114610a1957600080fd5b600080600080600080600060e0888a03121561422957600080fd5b8735614234816141ec565b96506020880135614244816141ec565b95506040880135614254816141ec565b94506060880135614264816141ec565b93506080880135925060a088013561427b816141ec565b915060c088013561428b816141ec565b8091505092959891949750929550565b6000602082840312156142ad57600080fd5b813567ffffffffffffffff8111156142c457600080fd5b6142d084828501614119565b949350505050565b6000602082840312156142ea57600080fd5b8135611090816141ec565b600081518084526020808501945080840160005b8381101561432557815187529582019590820190600101614309565b509495945050505050565b60208152600061109060208301846142f5565b6000806040838503121561435657600080fd5b82359150602083013567ffffffffffffffff81111561437457600080fd5b6143808582860161409f565b9150509250929050565b6000806040838503121561439d57600080fd5b823567ffffffffffffffff808211156143b557600080fd5b6143c186838701614119565b935060208501359150808211156143d757600080fd5b506143808582860161409f565b60005b838110156143ff5781810151838201526020016143e7565b50506000910152565b600081518084526144208160208601602086016143e4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006110906020830184614408565b6000806040838503121561447857600080fd5b8235614483816141ec565b9150602083013567ffffffffffffffff81111561437457600080fd5b6000602082840312156144b157600080fd5b813567ffffffffffffffff8111156144c857600080fd5b6142d08482850161409f565b600080604083850312156144e757600080fd5b82356144f2816141ec565b946020939093013593505050565b60006020828403121561451257600080fd5b8151801515811461109057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610a4357610a43614522565b80820180821115610a4357610a43614522565b6000602080838503121561458e57600080fd5b825167ffffffffffffffff8111156145a557600080fd5b8301601f810185136145b657600080fd5b80516145c46140be826140f5565b81815260059190911b820183019083810190878311156145e357600080fd5b928401925b82841015614601578351825292840192908401906145e8565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361466c5761466c614522565b5060010190565b600181811c9082168061468757607f821691505b6020821081036146c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8281526040602082015260006142d06040830184614408565b6000602082840312156146f157600080fd5b815167ffffffffffffffff81111561470857600080fd5b8201601f8101841361471957600080fd5b80516147276140be82614059565b81815285602083850101111561473c57600080fd5b61474d8260208301602086016143e4565b95945050505050565b83815260606020820152600061476f6060830185614408565b9050826040830152949350505050565b83815273ffffffffffffffffffffffffffffffffffffffff8316602082015260606040820152600061474d60608301846142f5565b6000602082840312156147c657600080fd5b5051919050565b81810381811115610a4357610a43614522565b601f8211156118d957600081815260208120601f850160051c810160208610156148075750805b601f850160051c820191505b8181101561482657828155600101614813565b505050505050565b815167ffffffffffffffff81111561484857614848613fdb565b61485c816148568454614673565b846147e0565b602080601f8311600181146148af57600084156148795750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555614826565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156148fc578886015182559484019460019091019084016148dd565b508582101561493857878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000806040838503121561495b57600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000816149aa576149aa614522565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6040815260006149e36040830185614408565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b604081526000614a4a6040830185614408565b9050826020830152939250505056fea2646970667358221220a646659884498d91a46510f0b074de3b557e70c66492fd2973bc7c27c2240f2564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061034c5760003560e01c8063748365ef116101bd578063b345b8c0116100f9578063c60b6c68116100a2578063e481e0a81161007c578063e481e0a814610841578063e7e4e1f714610849578063f2fde38b1461085c578063f9c6c0011461086f57600080fd5b8063c60b6c6814610812578063d2bd85d614610825578063d7c15bf61461083857600080fd5b8063c38c2df7116100d3578063c38c2df7146107cc578063c46d0c93146107ec578063c49d30b2146107ff57600080fd5b8063b345b8c01461076a578063b4dce1311461077d578063c23870ec146107c457600080fd5b80639b6c268211610166578063a90d866711610140578063a90d866714610729578063ab5dc6851461073c578063ad53fdbc1461074f578063aed885401461076257600080fd5b80639b6c2682146106ed5780639e8ccaf114610700578063a8bc29a61461072057600080fd5b80639168ae72116101975780639168ae721461069357806395fbf3a9146106d2578063987ad0ba146106da57600080fd5b8063748365ef146106425780638da5cb5b146106625780638e6622fb1461068057600080fd5b806328fb77451161028c578063576ee2441161023557806369d47dd81161020f57806369d47dd8146105b25780636c19e783146105d2578063715018a614610627578063736f616b1461062f57600080fd5b8063576ee244146105435780636064fcc81461057f57806367f134a01461059f57600080fd5b8063366b19ae11610266578063366b19ae146104eb578063431a1b97146105025780634ed148181461053057600080fd5b806328fb7745146104a55780632ac34bc1146104b85780632e4723fd146104cb57600080fd5b80630eaf43f2116102f95780631caaa487116102d35780631caaa487146104295780631e5943e31461045f5780632056c16014610472578063258ae5821461049257600080fd5b80630eaf43f2146103be5780630f075b78146103d15780631b48ba07146103e457600080fd5b80630422ddf31161032a5780630422ddf31461039657806306f809fb146103a35780630c0ef2b0146103b657600080fd5b806302852b49146103515780630386937a1461035b5780630421af781461036e575b600080fd5b610359610882565b005b610359610369366004613fa0565b610a07565b61038161037c366004613fb9565b610a1c565b60405190151581526020015b60405180910390f35b6074546103819060ff1681565b6103816103b136600461417f565b610a49565b610359610bce565b6103596103cc36600461420e565b610c3d565b6103596103df366004613fa0565b610e91565b606a546104049073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161038d565b610404610437366004613fa0565b60716020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61038161046d36600461429b565b610ea3565b6104856104803660046142d8565b610ebd565b60405161038d9190614330565b6103816104a0366004614343565b610f36565b6104856104b33660046142d8565b610fd5565b6103596104c636600461438a565b611097565b6104de6104d9366004613fa0565b61114f565b60405161038d9190614452565b336000908152606660205260409020541515610381565b6105226105103660046142d8565b60666020526000908152604090205481565b60405190815260200161038d565b61035961053e3660046142d8565b6111e9565b610522610551366004614465565b606f602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b606c546104049073ffffffffffffffffffffffffffffffffffffffff1681565b6103596105ad366004614343565b611328565b6105226105c03660046142d8565b60676020526000908152604090205481565b6103596105e03660046142d8565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610359611337565b61052261063d366004613fa0565b611349565b606b546104049073ffffffffffffffffffffffffffffffffffffffff1681565b60335473ffffffffffffffffffffffffffffffffffffffff16610404565b61035961068e36600461449f565b61144b565b6106bd6106a13660046142d8565b6070602052600090815260409020600281015460039091015482565b6040805192835260208301919091520161038d565b6104de6115c0565b6103596106e836600461429b565b61167b565b6103596106fb366004613fa0565b6116bf565b6068546104049073ffffffffffffffffffffffffffffffffffffffff1681565b610522606d5481565b610359610737366004614343565b6117bc565b61035961074a36600461438a565b611854565b61035961075d36600461438a565b611897565b6103596118de565b6103596107783660046142d8565b611a49565b61052261078b3660046144d4565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260706020908152604080832093835260049093019052205490565b610359611c6c565b6069546104049073ffffffffffffffffffffffffffffffffffffffff1681565b6103596107fa3660046142d8565b611d7b565b61052261080d3660046142d8565b611f37565b6103596108203660046142d8565b61201e565b61035961083336600461449f565b6121da565b61052260755481565b6103816121e4565b610359610857366004614343565b61221d565b61035961086a3660046142d8565b612228565b61035961087d36600461429b565b6122dc565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa1580156108f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109149190614500565b61097f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064015b60405180910390fd5b6074805460ff808216157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090921682179092557f5c198fffee97c54ce21fb3966c0158a0e94681cabb57e72da2840248401344bf91163360408051921515835273ffffffffffffffffffffffffffffffffffffffff90911660208301520160405180910390a1565b610a193382610a146115c0565b612320565b50565b600080610a2a846064614551565b610a3c90670de0b6b3a7640000614551565b8310159150505b92915050565b33600081815260666020526040812054909190848114610ac5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f576f726c64426174746c653a2053657373696f6e20686173206368616e6765646044820152606401610976565b6000610ad28684876126b9565b9050610ade8188610f36565b610b44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f576f726c64426174746c653a20436f756c646e2774205665726966792e0000006044820152606401610976565b6000610b4f846126ef565b73ffffffffffffffffffffffffffffffffffffffff85166000818152606660209081526040808320859055606782529182902042905581518b815290810184905292935090917ff977e7d4096cc35c20f46a1c7160bf678955959f7f0bf364c3d8130207f0e1d6910160405180910390a2506001979650505050505050565b60745460ff1615610c3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5742423a2047616d65206e6f74206163746976650000000000000000000000006044820152606401610976565b565b600054610100900460ff1615808015610c5d5750600054600160ff909116105b80610c775750303b158015610c77575060005460ff166001145b610d03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610976565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610d6157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b606880547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8b8116919091179092556069805482168a8416179055606c80548216898416179055606a80548216868416179055606b8054821685841617905542606d55600a607555607480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560658054909116918716919091179055610e2461275e565b8015610e8757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b610a193382610e9e6115c0565b6127f5565b600060755482516001610eb69190614568565b1092915050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260706020908152604091829020805483518184028101840190945280845260609392830182828015610f2a57602002820191906000526020600020905b815481526020019060010190808311610f16575b50505050509050919050565b600080610f90846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b60655490915073ffffffffffffffffffffffffffffffffffffffff16610fb68285612f70565b73ffffffffffffffffffffffffffffffffffffffff1614949350505050565b6068546040517f178b6de600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260609260009291169063178b6de690602401600060405180830381865afa15801561104a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611090919081019061457b565b9392505050565b6110a082610ea3565b611106576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a204d617820746f6b656e73207374616b65642e0000000000000000006044820152606401610976565b3360005b835181101561114957611137828583815181106111295761112961460c565b6020026020010151856127f5565b806111418161463b565b91505061110a565b50505050565b6072602052600090815260409020805461116890614673565b80601f016020809104026020016040519081016040528092919081815260200182805461119490614673565b80156111e15780601f106111b6576101008083540402835291602001916111e1565b820191906000526020600020905b8154815290600101906020018083116111c457829003601f168201915b505050505081565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b9190614500565b6112e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a65640000000000000000000000000000006044820152606401610976565b606c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611333338383612320565b5050565b61133f612f94565b610c3b6000613015565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff169063fe9fbb8090602401602060405180830381865afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc9190614500565b611442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a65640000000000000000000000000000006044820152606401610976565b50607381905590565b6000336068546040517f178b6de600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301529293506000929091169063178b6de690602401600060405180830381865afa1580156114c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261150a919081019061457b565b805190915080156111495760005b818110156115b9573073ffffffffffffffffffffffffffffffffffffffff166367f134a084838151811061154e5761154e61460c565b6020026020010151876040518363ffffffff1660e01b81526004016115749291906146c6565b600060405180830381600087803b15801561158e57600080fd5b505af11580156115a2573d6000803e3d6000fd5b5050505080806115b19061463b565b915050611518565b5050505050565b606a54604080517fbf81ee6d000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163bf81ee6d9160048083019260009291908290030181865afa158015611630573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261167691908101906146df565b905090565b60005b8151811015611333576116ad3383838151811061169d5761169d61460c565b6020026020010151610e9e6115c0565b806116b78161463b565b91505061167e565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa15801561172d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117519190614500565b6117b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a65640000000000000000000000000000006044820152606401610976565b607555565b60008281526071602052604090205473ffffffffffffffffffffffffffffffffffffffff163314611849576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5742423a20556e617574686f72697a65642e00000000000000000000000000006044820152606401610976565b61133333838361308c565b3360005b835181101561114957611885828583815181106118775761187761460c565b60200260200101518561308c565b8061188f8161463b565b915050611858565b60005b82518110156118d9576118c7338483815181106118b9576118b961460c565b602002602001015184612320565b806118d18161463b565b91505061189a565b505050565b6068546040517f178b6de600000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff169063178b6de690602401600060405180830381865afa15801561194d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611993919081019061457b565b805190915080156113335760005b818110156118d9573073ffffffffffffffffffffffffffffffffffffffff166367f134a08483815181106119d7576119d761460c565b60200260200101516119e76115c0565b6040518363ffffffff1660e01b8152600401611a049291906146c6565b600060405180830381600087803b158015611a1e57600080fd5b505af1158015611a32573d6000803e3d6000fd5b505050508080611a419061463b565b9150506119a1565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa158015611ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adb9190614500565b611b41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a65640000000000000000000000000000006044820152606401610976565b73ffffffffffffffffffffffffffffffffffffffff8116611bbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5742423a20496e76616c6964204e465420636f6e7472616374000000000000006044820152606401610976565b60685473ffffffffffffffffffffffffffffffffffffffff82811691167fcc84b7dfa78b34bb94bda9e3e859b03781c64e9c8870f014f905deb5917d1e343360405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a3606880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60685460009073ffffffffffffffffffffffffffffffffffffffff1663178b6de6336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401600060405180830381865afa158015611cf7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611d3d919081019061457b565b805190915080156113335760005b818110156118d957611d693384838151811061169d5761169d61460c565b80611d738161463b565b915050611d4b565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa158015611de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0d9190614500565b611e73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a65640000000000000000000000000000006044820152606401610976565b73ffffffffffffffffffffffffffffffffffffffff8116611ef0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5742423a20496e76616c696420416374696f6e7320636f6e74726163740000006044820152606401610976565b606a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260666020526040812054808203610a43576040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b166020820152436034820152611090906054015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b606b546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa15801561208c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b09190614500565b612116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a65640000000000000000000000000000006044820152606401610976565b73ffffffffffffffffffffffffffffffffffffffff8116612193576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5742423a20496e76616c696420746f6b656e20616464726573730000000000006044820152606401610976565b606980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610a19338261399a565b6000336121f0816126ef565b73ffffffffffffffffffffffffffffffffffffffff90911660009081526066602052604090205550600190565b6113333383836127f5565b612230612f94565b73ffffffffffffffffffffffffffffffffffffffff81166122d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610976565b610a1981613015565b60005b81518110156113335761230e338383815181106122fe576122fe61460c565b6020026020010151610a146115c0565b806123188161463b565b9150506122df565b606a546040517f2af2677a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632af2677a90612376908490600401614452565b602060405180830381865afa158015612393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b79190614500565b1515600114612422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e46545374616b696e673a20626174746c65206e6f74206372656174656400006044820152606401610976565b60008281526071602052604090205473ffffffffffffffffffffffffffffffffffffffff8481169116146124b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4e46545374616b696e673a20556e617574686f72697a65642e000000000000006044820152606401610976565b60008281526071602052604090205473ffffffffffffffffffffffffffffffffffffffff1661253d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e46545374616b696e673a20546f6b656e204964206e6f74207374616b6564006044820152606401610976565b606a546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90612593908490600401614452565b602060405180830381865afa1580156125b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d49190614500565b1561263b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e46545374616b696e673a20626174746c6520656e64656400000000000000006044820152606401610976565b73ffffffffffffffffffffffffffffffffffffffff831660008181526070602090815260408083208684526004810190925291829020429081905591519092917f426eb4f62756d59893dffae42e39f4a32ec6d17cab2605ed0e8b6e1891c241be916126ab918791879190614756565b60405180910390a250505050565b60008383836040516020016126d09392919061477f565b6040516020818303038152906040528051906020012090509392505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526066602090815260408083205490517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16928101929092526034820152436054820152610a4390607401611fa0565b600054610100900460ff16610c3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610976565b606a546040517f2af2677a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632af2677a9061284b908490600401614452565b602060405180830381865afa158015612868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288c9190614500565b6128f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a20626174746c65206e6f7420637265617465640000000000000000006044820152606401610976565b606a546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90612948908490600401614452565b602060405180830381865afa158015612965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129899190614500565b156129f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20626174746c6520656e6465640000000000000000000000000000006044820152606401610976565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260706020526040808220805460695492517f70a0823100000000000000000000000000000000000000000000000000000000815260048101959095529094859491939216906370a0823190602401602060405180830381865afa158015612a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9c91906147b4565b9050612ab2612aac836001614568565b82610a1c565b15612f0557600284018190558354600181810186556000868152602090209091018790558454612ae291906147cd565b6000878152600186810160209081526040808420949094556071815283832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8d81169182179092556004808b0190935293859020429055606854606c5495517ff242432a000000000000000000000000000000000000000000000000000000008152928301949094529384166024820152604481018a9052606481019190915260a06084820152600260a48201527f307800000000000000000000000000000000000000000000000000000000000060c482015291169063f242432a9060e401600060405180830381600087803b158015612bf557600080fd5b505af1158015612c09573d6000803e3d6000fd5b50505060008781526072602052604090209050612c26868261482e565b508673ffffffffffffffffffffffffffffffffffffffff167fa2a4b640524f5410a2969ac3f90a5c7a3197662d845ba3bdf16fe9010e5aad9a878742604051612c7193929190614756565b60405180910390a273ffffffffffffffffffffffffffffffffffffffff87166000908152606f60205260409081902090517f696e6465780000000000000000000000000000000000000000000000000000008152600501908152602001604051809103902054600003612e8f57606e805460018101825560009182527f9930d9ff0dee0ef5ca2f7710ea66b8f84dd0f5f5351ecffe72b952cd9db7142a0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a161790555b606e54612d5d906001906147cd565b811015612de957612dd76040518060400160405280601581526020017f616c6c206f667374616b657273416464726573733a0000000000000000000000815250606e8381548110612db057612db061460c565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16613a9d565b80612de18161463b565b915050612d4e565b50606e5473ffffffffffffffffffffffffffffffffffffffff88166000818152606f6020818152604080842081517f696e646578000000000000000000000000000000000000000000000000000000815260058082018390528351602592819003830181209990995596909552929091527f636f756e74000000000000000000000000000000000000000000000000000000855292840152905191829003019020600190555b73ffffffffffffffffffffffffffffffffffffffff87166000908152606f60205260409081902090517f636f756e7400000000000000000000000000000000000000000000000000000081526005019081526040519081900360200190208054906000612efb8361463b565b9190505550612f67565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f7420656e6f75676820546f77657220546f6b656e732e00000000000000006044820152606401610976565b50505050505050565b6000806000612f7f8585613b2e565b91509150612f8c81613b73565b509392505050565b60335473ffffffffffffffffffffffffffffffffffffffff163314610c3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610976565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606a546040517f2af2677a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632af2677a906130e2908490600401614452565b602060405180830381865afa1580156130ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131239190614500565b151560011461318e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e46545374616b696e673a20626174746c65206e6f74206372656174656400006044820152606401610976565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260706020526040808220606a5491517f32165c3c000000000000000000000000000000000000000000000000000000008152909391909116906332165c3c906131f8908690600401614452565b6040805180830381865afa158015613214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132389190614948565b6000868152600485016020526040902054909250421190508061325a57508042115b6132c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e4654556e5374616b696e673a20636f6f6c646f776e206e6f74206f766572006044820152606401610976565b81546000906132d1906001906147cd565b905060008360000182815481106132ea576132ea61460c565b906000526020600020015490506000846001016000888152602001908152602001600020549050818560000182815481106133275761332761460c565b6000918252602080832090910192909255838152600187018252604080822084905589825260048801909252908120558454156133b757845485908061336f5761336f61496c565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810183905590920190925588825260018701905260408120555b606854606c546040517ff242432a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201528a82166024820152604481018a90526001606482015260a06084820152600260a48201527f307800000000000000000000000000000000000000000000000000000000000060c482015291169063f242432a9060e401600060405180830381600087803b15801561347057600080fd5b505af1158015613484573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff167fcdc644f7a40cb5d51e46e25428f724a3e15ae38f01d0e83c3c863f51719004db88886040516134d09291906146c6565b60405180910390a260008781526072602052604081206134ef91613f52565b73ffffffffffffffffffffffffffffffffffffffff88166000908152606f60205260409081902090517f696e6465780000000000000000000000000000000000000000000000000000008152600501908152602001604051809103902054600003613597576135926040518060400160405280600981526020017f6e6f7420666f756e640000000000000000000000000000000000000000000000815250613d26565b61389b565b73ffffffffffffffffffffffffffffffffffffffff88166000908152606f602052604080822090517f636f756e7400000000000000000000000000000000000000000000000000000081526005019081526020016040518091039020549050806001036138275773ffffffffffffffffffffffffffffffffffffffff89166000818152606f6020818152604080842081517f696e6465780000000000000000000000000000000000000000000000000000008082526005808301849052845160259381900384018120548a8a5288885292815280820185905285519081900384018120899055988852959094527f636f756e740000000000000000000000000000000000000000000000000000008752938601525193849003909101909220819055606e80546136c9906001906147cd565b815481106136d9576136d961460c565b600091825260209091200154606e805473ffffffffffffffffffffffffffffffffffffffff909216925090806137115761371161496c565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905580606e6137776001856147cd565b815481106137875761378761460c565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790559183168152606f90915260409081902090517f696e646578000000000000000000000000000000000000000000000000000000815283919060050190815260405190819003602001902055506138999050565b73ffffffffffffffffffffffffffffffffffffffff89166000908152606f60205260409081902090517f636f756e74000000000000000000000000000000000000000000000000000000815260050190815260405190819003602001902080549060006138938361499b565b91905055505b505b60005b8554811015613917576139056040518060400160405280601081526020017f746f6b656e6449642053746f7265643a000000000000000000000000000000008152508760000183815481106138f5576138f561460c565b9060005260206000200154613db5565b8061390f8161463b565b91505061389e565b5060005b606e5461392a906001906147cd565b81101561398f5761397d6040518060400160405280601581526020017f616c6c206f667374616b657273416464726573733a0000000000000000000000815250606e8381548110612db057612db061460c565b806139878161463b565b91505061391b565b505050505050505050565b6068546040517f178b6de600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600092169063178b6de690602401600060405180830381865afa158015613a0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613a51919081019061457b565b805190915080156111495760005b818110156115b957613a8b85848381518110613a7d57613a7d61460c565b60200260200101518661308c565b80613a958161463b565b915050613a5f565b6113338282604051602401613ab39291906149d0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f319af33300000000000000000000000000000000000000000000000000000000179052613e42565b6000808251604103613b645760208301516040840151606085015160001a613b5887828585613e63565b94509450505050613b6c565b506000905060025b9250929050565b6000816004811115613b8757613b87614a08565b03613b8f5750565b6001816004811115613ba357613ba3614a08565b03613c0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610976565b6002816004811115613c1e57613c1e614a08565b03613c85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610976565b6003816004811115613c9957613c99614a08565b03610a19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610976565b610a1981604051602401613d3a9190614452565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052613e42565b6113338282604051602401613dcb929190614a37565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc000000000000000000000000000000000000000000000000000000001790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613e9a5750600090506003613f49565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613eee573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116613f4257600060019250925050613f49565b9150600090505b94509492505050565b508054613f5e90614673565b6000825580601f10613f6e575050565b601f016020900490600052602060002090810190610a1991905b80821115613f9c5760008155600101613f88565b5090565b600060208284031215613fb257600080fd5b5035919050565b60008060408385031215613fcc57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561405157614051613fdb565b604052919050565b600067ffffffffffffffff82111561407357614073613fdb565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126140b057600080fd5b81356140c36140be82614059565b61400a565b8181528460208386010111156140d857600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff82111561410f5761410f613fdb565b5060051b60200190565b600082601f83011261412a57600080fd5b8135602061413a6140be836140f5565b82815260059290921b8401810191818101908684111561415957600080fd5b8286015b84811015614174578035835291830191830161415d565b509695505050505050565b60008060006060848603121561419457600080fd5b833567ffffffffffffffff808211156141ac57600080fd5b6141b88783880161409f565b94506020860135935060408601359150808211156141d557600080fd5b506141e286828701614119565b9150509250925092565b73ffffffffffffffffffffffffffffffffffffffff81168114610a1957600080fd5b600080600080600080600060e0888a03121561422957600080fd5b8735614234816141ec565b96506020880135614244816141ec565b95506040880135614254816141ec565b94506060880135614264816141ec565b93506080880135925060a088013561427b816141ec565b915060c088013561428b816141ec565b8091505092959891949750929550565b6000602082840312156142ad57600080fd5b813567ffffffffffffffff8111156142c457600080fd5b6142d084828501614119565b949350505050565b6000602082840312156142ea57600080fd5b8135611090816141ec565b600081518084526020808501945080840160005b8381101561432557815187529582019590820190600101614309565b509495945050505050565b60208152600061109060208301846142f5565b6000806040838503121561435657600080fd5b82359150602083013567ffffffffffffffff81111561437457600080fd5b6143808582860161409f565b9150509250929050565b6000806040838503121561439d57600080fd5b823567ffffffffffffffff808211156143b557600080fd5b6143c186838701614119565b935060208501359150808211156143d757600080fd5b506143808582860161409f565b60005b838110156143ff5781810151838201526020016143e7565b50506000910152565b600081518084526144208160208601602086016143e4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006110906020830184614408565b6000806040838503121561447857600080fd5b8235614483816141ec565b9150602083013567ffffffffffffffff81111561437457600080fd5b6000602082840312156144b157600080fd5b813567ffffffffffffffff8111156144c857600080fd5b6142d08482850161409f565b600080604083850312156144e757600080fd5b82356144f2816141ec565b946020939093013593505050565b60006020828403121561451257600080fd5b8151801515811461109057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610a4357610a43614522565b80820180821115610a4357610a43614522565b6000602080838503121561458e57600080fd5b825167ffffffffffffffff8111156145a557600080fd5b8301601f810185136145b657600080fd5b80516145c46140be826140f5565b81815260059190911b820183019083810190878311156145e357600080fd5b928401925b82841015614601578351825292840192908401906145e8565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361466c5761466c614522565b5060010190565b600181811c9082168061468757607f821691505b6020821081036146c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8281526040602082015260006142d06040830184614408565b6000602082840312156146f157600080fd5b815167ffffffffffffffff81111561470857600080fd5b8201601f8101841361471957600080fd5b80516147276140be82614059565b81815285602083850101111561473c57600080fd5b61474d8260208301602086016143e4565b95945050505050565b83815260606020820152600061476f6060830185614408565b9050826040830152949350505050565b83815273ffffffffffffffffffffffffffffffffffffffff8316602082015260606040820152600061474d60608301846142f5565b6000602082840312156147c657600080fd5b5051919050565b81810381811115610a4357610a43614522565b601f8211156118d957600081815260208120601f850160051c810160208610156148075750805b601f850160051c820191505b8181101561482657828155600101614813565b505050505050565b815167ffffffffffffffff81111561484857614848613fdb565b61485c816148568454614673565b846147e0565b602080601f8311600181146148af57600084156148795750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555614826565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156148fc578886015182559484019460019091019084016148dd565b508582101561493857878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000806040838503121561495b57600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000816149aa576149aa614522565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6040815260006149e36040830185614408565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b604081526000614a4a6040830185614408565b9050826020830152939250505056fea2646970667358221220a646659884498d91a46510f0b074de3b557e70c66492fd2973bc7c27c2240f2564736f6c63430008110033",
  "devdoc": {
    "author": "@notice you can use this contract for only staking, unstaking and restaking the NFTs",
    "details": "WorldBattleSession,BattleOps and BattleOps are being inheriented in this contract",
    "kind": "dev",
    "methods": {
      "checkRequiredTokenBalance(uint256,uint256)": {
        "params": {
          "_balance": "user tower token balance",
          "_nftCount": "how many nft user have"
        },
        "returns": {
          "_0": "true if he has higher tower token balance than required"
        }
      },
      "getAllToken(address)": {
        "params": {
          "_player": "address of a user"
        }
      },
      "getStakedTokensFor(address)": {
        "params": {
          "_player": "is the user address"
        }
      },
      "initialize(address,address,address,address,uint256,address,address)": {
        "params": {
          "_cdhNft": "is to store contract address for CDHNFTInventory,",
          "_nftHolder": "is to store nftholder address",
          "_towerToken": "is to store contract address for toker token,"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "restake(uint256,string)": {
        "params": {
          "_battleId": "in which the token id will be restaked",
          "_tokenId": "is tokenid that user have"
        }
      },
      "restakeAll(string)": {
        "params": {
          "_battleId": "in which the token id will be restaked"
        }
      },
      "restakeTokens(uint256[],string)": {
        "params": {
          "_battleId": "in which the token id will be restaked",
          "_tokenIds": "is tokenid that user have staked"
        }
      },
      "restakeTokensWithoutBattleId(uint256[])": {
        "params": {
          "_tokenIds": "is tokenid that user are about to stake"
        }
      },
      "restakeWithoutBattleId(uint256)": {
        "params": {
          "_tokenId": "is tokenid that user are about to stake"
        }
      },
      "setCDHNFTContractAddress(address)": {
        "details": "only admin can set that",
        "params": {
          "_nftContract": "new NFT address"
        }
      },
      "setCoolDownPeriod(uint256)": {
        "params": {
          "time": "in unix"
        },
        "returns": {
          "_0": "time"
        }
      },
      "setNFTHolderAddress(address)": {
        "details": "only admin can set that",
        "params": {
          "_holder": "new holder address"
        }
      },
      "setTowerToken(address)": {
        "details": "only admin can set that",
        "params": {
          "_towerToken": "is the new token address"
        }
      },
      "stake(uint256,string)": {
        "details": "it calls internalStake function for further processing",
        "params": {
          "_battleId": "is unique battle in which the NFT will be staked",
          "_tokenId": "is tokenId of CDHNFT"
        }
      },
      "stakeTokens(uint256[],string)": {
        "details": "it calls internalStake function for further processing",
        "params": {
          "_battleId": "is unique battle in which the NFT will be staked",
          "tokenIds": "is an array of tokenId of CDHNFT"
        }
      },
      "stakeTokensWithoutBattleId(uint256[])": {
        "params": {
          "_tokenIds": "an array of NFT"
        }
      },
      "stakeWithoutBattleId(uint256)": {
        "params": {
          "_tokenId": "is tokenid that user are about to stake"
        }
      },
      "toReturnStakedTokenTime(address,uint256)": {
        "params": {
          "_player": "user address",
          "_tokenId": "token id which he staked"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint256,string)": {
        "details": "it calls internalUnStake function for further processing",
        "params": {
          "_battleId": "is unique battle in which the NFT will be unstaked",
          "_tokenId": "is tokenId of CDHNFT"
        }
      },
      "unstakeAll(string)": {
        "details": "it calls internalUnStakeAll function for further processing",
        "params": {
          "_battleId": "is unique battle in which the NFT will be unstaked"
        }
      },
      "unstakeTokens(uint256[],string)": {
        "details": "it calls internalUnStake function for further processing",
        "params": {
          "_battleId": "is unique battle in which the NFT will be unstaked",
          "tokenIds": "is tokenId of CDHNFT"
        }
      }
    },
    "title": "creation of WorldBossBattle where user can stake their NFT",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NFTRestaked(address,uint256,string,uint256)": {
        "notice": "event is emitted when nft is restaked with owner address, token id and in which battle the token is restaked"
      },
      "NFTStaked(address,uint256,string,uint256)": {
        "notice": "event is emitted when nft is staked with owner address, token id and in which battle the token is staked"
      },
      "NFTUnstaked(address,uint256,string)": {
        "notice": "event is emitted when nft is unstaked with owner address, token id and in which battle the token is unstaked"
      },
      "SetGamePausedState(bool,address)": {
        "notice": "event for when game is paused which emits isPaused status and sender address"
      },
      "SetNFTContract(address,address,address)": {
        "notice": "Event for when setting cdh contract which emitts old cdh NFT adress and new cdh NFT address along with sender adddress"
      }
    },
    "kind": "user",
    "methods": {
      "cdhNFT()": {
        "notice": "to store cdhNFT contract address"
      },
      "checkRequiredTokenBalance(uint256,uint256)": {
        "notice": "internal methods for staking operations"
      },
      "getAllToken(address)": {
        "notice": "function to get all the token that a address have"
      },
      "getStakedTokensFor(address)": {
        "notice": "function to get the tokenId of a user that staked"
      },
      "initialize(address,address,address,address,uint256,address,address)": {
        "notice": "since it is upgradable function it is initialized instead of using constructor"
      },
      "isGamePaused()": {
        "notice": "to store if the game should be paused or not"
      },
      "mappingArray(address,string)": {
        "notice": "below is nested mapping, have two string acts as unique key they are index and count index denote         the \"stakersAddress\" index where value counts how many times staking is done"
      },
      "restake(uint256,string)": {
        "notice": "function where  restaking works"
      },
      "restakeAll(string)": {
        "notice": "function where restakeAll works"
      },
      "restakeAllWithoutBattleId()": {
        "notice": "function where user can restakeAll without battleId"
      },
      "restakeTokens(uint256[],string)": {
        "notice": "function where  restakeTokens works"
      },
      "restakeTokensWithoutBattleId(uint256[])": {
        "notice": "function where user can restake an array without battleId"
      },
      "restakeWithoutBattleId(uint256)": {
        "notice": "function where user can restake without battleId"
      },
      "setCDHNFTContractAddress(address)": {
        "notice": "function to change the contract address of CDHNFT"
      },
      "setCoolDownPeriod(uint256)": {
        "notice": "to set the cooldown period"
      },
      "setNFTHolderAddress(address)": {
        "notice": "function to change the holder address that will set CDHNFT"
      },
      "setTowerToken(address)": {
        "notice": "function to change the contract address of tower token"
      },
      "stake(uint256,string)": {
        "notice": "public function to stake a single CDHNFT that sender owns"
      },
      "stakeAllWithoutBattleId()": {
        "notice": "function where user can stake all NFT without battleId"
      },
      "stakeTokens(uint256[],string)": {
        "notice": "public function to stake a array of CDHNFT that sender owns"
      },
      "stakeTokensWithoutBattleId(uint256[])": {
        "notice": "function to stake an array of token without battleID"
      },
      "stakeWithoutBattleId(uint256)": {
        "notice": "function where user can stake without battleId"
      },
      "stakers(address)": {
        "notice": "mapping for TokenStakers"
      },
      "toReturnStakedTokenTime(address,uint256)": {
        "notice": "function to see user stakedTokenTime"
      },
      "tokenOwner(uint256)": {
        "notice": "Mapping of tokenId to owner's address"
      },
      "tokenToBattleId(uint256)": {
        "notice": "maps tokenId to battleId"
      },
      "towerToken()": {
        "notice": "to store tower token contract"
      },
      "unstake(uint256,string)": {
        "notice": "public function to unstake a single CDHNFT that sender owns"
      },
      "unstakeAll(string)": {
        "notice": "public function to unstake all  CDHNFT that sender owns"
      },
      "unstakeTokens(uint256[],string)": {
        "notice": "public function to unstake an array of  CDHNFT that sender owns"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 547,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 550,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1034,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 419,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 539,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4165,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "signer",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 4169,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "sessions",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 4173,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "syncedTime",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5313,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "cdhNFT",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(ICDHNFTInventory)6996"
      },
      {
        "astId": 5317,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "towerToken",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(ITOWER)7016"
      },
      {
        "astId": 5320,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "wbbActions",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IWBBActions)7132"
      },
      {
        "astId": 5323,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "accessControls",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(GameAccessControls)4146"
      },
      {
        "astId": 5325,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "nftHolder",
        "offset": 0,
        "slot": "108",
        "type": "t_address"
      },
      {
        "astId": 5327,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "lastInteractionTime",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 5347,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "stakersAddress",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5354,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "mappingArray",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      {
        "astId": 5360,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "stakers",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_struct(TokenStaker)5343_storage)"
      },
      {
        "astId": 5365,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "tokenOwner",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5370,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "tokenToBattleId",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5373,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "cooldownPeriod",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 5376,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "isGamePaused",
        "offset": 0,
        "slot": "116",
        "type": "t_bool"
      },
      {
        "astId": 5378,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "maxStakeCount",
        "offset": 0,
        "slot": "117",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GameAccessControls)4146": {
        "encoding": "inplace",
        "label": "contract GameAccessControls",
        "numberOfBytes": "20"
      },
      "t_contract(ICDHNFTInventory)6996": {
        "encoding": "inplace",
        "label": "contract ICDHNFTInventory",
        "numberOfBytes": "20"
      },
      "t_contract(ITOWER)7016": {
        "encoding": "inplace",
        "label": "contract ITOWER",
        "numberOfBytes": "20"
      },
      "t_contract(IWBBActions)7132": {
        "encoding": "inplace",
        "label": "contract IWBBActions",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_address,t_struct(TokenStaker)5343_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WorldBossBattle.TokenStaker)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenStaker)5343_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenStaker)5343_storage": {
        "encoding": "inplace",
        "label": "struct WorldBossBattle.TokenStaker",
        "members": [
          {
            "astId": 5330,
            "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
            "label": "tokenIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5334,
            "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
            "label": "tokenIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5336,
            "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
            "label": "balance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5338,
            "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
            "label": "stakedTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5342,
            "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
            "label": "stakedTokenTime",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
{
  "address": "0xDadd1125B8Df98A66Abd5EB302C0d9Ca5A061dC2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "_bossIds",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "CreateBattle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_bossId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxHp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "CreateBoss",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "DisableBattle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "EnableBattle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "UpdateBattle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_bossId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxHp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "UpdateBoss",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accessControls",
      "outputs": [
        {
          "internalType": "contract GameAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "battleList",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "battles",
      "outputs": [
        {
          "internalType": "string",
          "name": "battleId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "bossCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bossList",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "bosses",
      "outputs": [
        {
          "internalType": "string",
          "name": "bossId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxHp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_bossId",
          "type": "string[]"
        }
      ],
      "name": "checkActiveBosses",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "checkBattleEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "checkBattleExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "checkBattleStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bossId",
          "type": "string"
        }
      ],
      "name": "checkBossExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bossId",
          "type": "string"
        }
      ],
      "name": "checkBossStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_bossIds",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "createBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "bossId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxHp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "createBoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllBattle",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllBosses",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "getBattlePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestBattle",
      "outputs": [
        {
          "internalType": "string",
          "name": "battleId",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract GameAccessControls",
          "name": "_accessControls",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reInitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setBattleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bossId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setBossStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "updateBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "bossId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxHp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "updateBoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x24a18818ea9719983075c5dee646e3e36d1a3b865e32378c57d4f84b5e58c57a",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0xDadd1125B8Df98A66Abd5EB302C0d9Ca5A061dC2",
    "transactionIndex": 0,
    "gasUsed": "2375460",
    "logsBloom": "0x
    "blockHash": "0x317a44418336774f2b28a30edeb77f86ab614dd39a94c27bcfcd37e2ffd6f6e4",
    "transactionHash": "0x24a18818ea9719983075c5dee646e3e36d1a3b865e32378c57d4f84b5e58c57a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 60,
        "transactionHash": "0x24a18818ea9719983075c5dee646e3e36d1a3b865e32378c57d4f84b5e58c57a",
        "address": "0xDadd1125B8Df98A66Abd5EB302C0d9Ca5A061dC2",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x317a44418336774f2b28a30edeb77f86ab614dd39a94c27bcfcd37e2ffd6f6e4"
      }
    ],
    "blockNumber": 60,
    "cumulativeGasUsed": "2375460",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "68e89776f039ff01195e0154ad9d0d82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_bossIds\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"CreateBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_bossId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxHp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"CreateBoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"DisableBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"EnableBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"UpdateBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_bossId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxHp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"UpdateBoss\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract GameAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"battleList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"battles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"battleId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bossCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bossList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"bosses\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"bossId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxHp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_bossId\",\"type\":\"string[]\"}],\"name\":\"checkActiveBosses\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"checkBattleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"checkBattleExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"checkBattleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bossId\",\"type\":\"string\"}],\"name\":\"checkBossExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bossId\",\"type\":\"string\"}],\"name\":\"checkBossStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_bossIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"createBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"bossId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxHp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"createBoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBattle\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBosses\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"getBattlePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestBattle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"battleId\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract GameAccessControls\",\"name\":\"_accessControls\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setBattleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bossId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setBossStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"updateBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"bossId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxHp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"updateBoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkActiveBosses(string[])\":{\"params\":{\"_bossId\":\"is should be given as parameter\"}},\"checkBattleEnded(string)\":{\"params\":{\"_battleId\":\"its a string\"}},\"checkBattleStatus(string)\":{\"params\":{\"_battleId\":\"its a string\"}},\"checkBossStatus(string)\":{\"params\":{\"_bossId\":\"is should be given as parameter\"}},\"createBattle(string,string[],uint256,uint256)\":{\"params\":{\"_battleId\":\"which is a string and identify battles,\",\"_bossIds\":\"which is an array of string,\",\"_endTime\":\"are unix timestamp\",\"_startTime\":\"and\"}},\"createBoss(string,string,uint256,string)\":{\"params\":{\"bossId\":\"which is a string and identify boss,\",\"maxHp\":\"is uint that have boss health and\",\"name\":\"which is name of string,\",\"uri\":\"is a string\"}},\"getBattlePeriod(string)\":{\"params\":{\"_battleId\":\"which is in string format\"}},\"updateBattle(string,uint256,uint256)\":{\"params\":{\"_battleId\":\"which is a string and identify battles,\",\"_endTime\":\"are unix timestamp\",\"_startTime\":\"and\"}},\"updateBoss(string,string,uint256,string)\":{\"params\":{\"bossId\":\"which is a string and identify boss,\",\"maxHp\":\"is uint that have boss health and\",\"name\":\"which is name of string,\",\"uri\":\"is a string\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"battleList(uint256)\":{\"notice\":\"An array of all the battle identifiers that have been created.\"},\"battles(string)\":{\"notice\":\"Mapping of battle data, where the key is the battle's identifier and the value is the battle's data structure.\"},\"bossList(uint256)\":{\"notice\":\"An array of all the boss identifiers that have been created.\"},\"bosses(string)\":{\"notice\":\"Mapping of boss data, where the key is the boss's identifier and the value is the boss's data structure.\"},\"checkActiveBosses(string[])\":{\"notice\":\"checks the boss is available or not\"},\"checkBattleEnded(string)\":{\"notice\":\"to check the battle Ended or not i.e true or false\"},\"checkBattleStatus(string)\":{\"notice\":\"function to check the battleStatus i.e true or false\"},\"checkBossStatus(string)\":{\"notice\":\"checks the boss is available or not\"},\"createBattle(string,string[],uint256,uint256)\":{\"notice\":\"function to create battle requires battleId and bossId, starting time and ending time\"},\"createBoss(string,string,uint256,string)\":{\"notice\":\"Method to create a new boss.\"},\"getAllBattle()\":{\"notice\":\"return the list of all bosses\"},\"getAllBosses()\":{\"notice\":\"return the list of all bosses\"},\"getBattlePeriod(string)\":{\"notice\":\"gives the end time of an battle in unix\"},\"getLatestBattle()\":{\"notice\":\"return the last created battle\"},\"updateBattle(string,uint256,uint256)\":{\"notice\":\"function to update battle requires battleId, bossId, starting time and ending time along with battle status.         Note: 1. Battle should be inactive to be able to update.               2. If battle should be updated with new bosses or updated boss, new battle SHOULD be created\"},\"updateBoss(string,string,uint256,string)\":{\"notice\":\"function to update the boss character\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/game/WBBActionsV2.sol\":\"WBBActionsV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/game/GameAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/// @title A contract for giving role for address\\n/// @dev this is an upgradable function\\ncontract GameAccessControls is AccessControl {\\n    bytes32 public constant MANAGER_ROLE = 0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08; // keccak256(abi.encodePacked(\\\"MANAGER_ROLE\\\"));\\n\\n    event GameRoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event GameRoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /// @notice Constructor for setting up default roles\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(MANAGER_ROLE, _msgSender());\\n    }\\n\\n    /// @notice function to give an address Admin role\\n    /// @param _address address that will be getting role\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit GameRoleGranted(DEFAULT_ADMIN_ROLE, _address, _msgSender());\\n    }\\n\\n    /// @notice function to give an address Admin role\\n    /// @param _address address that will be getting role\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit GameRoleRevoked(DEFAULT_ADMIN_ROLE, _address, _msgSender());\\n    }\\n\\n    /// @notice function to give role to an address\\n    /// @param _address address that will be getting role\\n    function addRole(bytes32 _role, address _address) external {\\n        grantRole(_role, _address);\\n        emit GameRoleGranted(_role, _address, _msgSender());\\n    }\\n\\n    /// @notice function to remove role of an address\\n    /// @param _address address that will be revoked\\n    function removeRole(bytes32 _role, address _address) external {\\n        revokeRole(_role, _address);\\n        emit GameRoleRevoked(_role, _address, _msgSender());\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Unauthorized.\\\");\\n        _;\\n    }\\n\\n    /// @notice function to check an address has Admin role\\n    /// @param _address address that has admin role\\n    /// @return bool true if address is admmin\\n    function hasAdminRole(address _address) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    function isAuthorized(address _address) external view returns (bool) {\\n        return hasAdminRole(_address) || hasRole(MANAGER_ROLE, _address);\\n    }\\n}\\n\",\"keccak256\":\"0x5c9d4e1360a5fedb2052c10c5f6c5ec6f841ba0aa05a3d124919e7f90caaa424\",\"license\":\"MIT\"},\"contracts/game/WBBActions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./WBBData.sol\\\";\\nimport \\\"./GameAccessControls.sol\\\";\\n\\ncontract WBBActions is Initializable, ContextUpgradeable, WBBData {\\n    GameAccessControls public accessControls;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(GameAccessControls _accessControls) public initializer {\\n        accessControls = GameAccessControls(_accessControls);\\n    }\\n\\n    /*\\n        ---------------------------------------\\n        \\u2554\\u2557 \\u250c\\u2500\\u2510\\u250c\\u252c\\u2510\\u250c\\u252c\\u2510\\u252c  \\u250c\\u2500\\u2510  \\u2554\\u2550\\u2557\\u250c\\u2500\\u2510\\u250c\\u252c\\u2510\\u252c\\u250c\\u2500\\u2510\\u250c\\u2510\\u250c\\u250c\\u2500\\u2510\\n        \\u2560\\u2569\\u2557\\u251c\\u2500\\u2524 \\u2502  \\u2502 \\u2502  \\u251c\\u2524   \\u2560\\u2550\\u2563\\u2502   \\u2502 \\u2502\\u2502 \\u2502\\u2502\\u2502\\u2502\\u2514\\u2500\\u2510\\n        \\u255a\\u2550\\u255d\\u2534 \\u2534 \\u2534  \\u2534 \\u2534\\u2500\\u2518\\u2514\\u2500\\u2518  \\u2569 \\u2569\\u2514\\u2500\\u2518 \\u2534 \\u2534\\u2514\\u2500\\u2518\\u2518\\u2514\\u2518\\u2514\\u2500\\u2518\\n        ---------------------------------------\\n    */\\n    function checkBattleExists(string memory _battleId) public view returns (bool) {\\n        if (battleList.length > 0) {\\n            string[] memory allBattleList = battleList;\\n            for (uint256 i = 0; i < allBattleList.length;) {\\n                if (keccak256(abi.encodePacked(allBattleList[i])) == keccak256(abi.encodePacked(_battleId))) return true;\\n            unchecked {\\n                i++;\\n            }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function setBattleStatus(string memory _battleId, bool _status) external {\\n        require(accessControls.isAuthorized(msg.sender), \\\"WBB: Unauthorized to set battle status\\\");\\n        require(checkBattleExists(_battleId), \\\"WBB: Battle doesn't exist\\\");\\n        Battle storage battleInstance = battles[_battleId];\\n        battleInstance.status = _status;\\n    }\\n\\n    /**\\n     * @notice function to create battle requires battleId and bossId, starting time and ending time\\n     * @param _battleId which is a string and identify battles,\\n     * @param _bossIds which is an array of string,\\n     * @param _startTime and\\n     * @param _endTime are unix timestamp\\n     */\\n    function createBattle(string memory _battleId, string[] memory _bossIds, uint256 _startTime, uint256 _endTime) external {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.isAuthorized(operatorAddress), \\\"WBB: Unauthorized to create battle\\\");\\n        require(!checkBattleExists(_battleId), \\\"WBB: Battle already Exists\\\");\\n        require(_endTime > _startTime, \\\"WBB: invalid battle period\\\");\\n\\n        checkActiveBosses(_bossIds);\\n\\n        Battle storage battleInstance = battles[_battleId];\\n        battleInstance.battleId = _battleId;\\n        battleInstance.startTime = _startTime;\\n        battleInstance.endTime = _endTime;\\n        battleInstance.status = true;\\n        battleInstance.bossCount = _bossIds.length;\\n        battleList.push(_battleId);\\n\\n        battleInstance.index = battleList.length - 1;\\n        for (uint i = 0; i < _bossIds.length; i++) {\\n            battleInstance.bossIds.push(_bossIds[i]);\\n        }\\n        emit CreateBattle(operatorAddress, _battleId, _bossIds, _startTime, _endTime);\\n    }\\n\\n    /**\\n     * @notice function to update battle requires battleId, bossId, starting time and ending time along with battle status.\\n     *         Note: 1. Battle should be inactive to be able to update.\\n     *               2. If battle should be updated with new bosses or updated boss, new battle SHOULD be created\\n     * @param _battleId which is a string and identify battles,\\n     * @param _startTime and\\n     * @param _endTime are unix timestamp\\n     */\\n    function updateBattle(string memory _battleId, uint256 _startTime, uint256 _endTime) external {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.isAuthorized(operatorAddress), \\\"WBB: Unauthorized to update battle\\\");\\n        require(checkBattleExists(_battleId), \\\"WBB: Battle doesn't exists\\\");\\n        require(!battles[_battleId].status, \\\"WBB: Battle is active\\\");\\n\\n        Battle storage battleInstance = battles[_battleId];\\n        battleInstance.battleId = _battleId;\\n        battleInstance.startTime = _startTime;\\n        battleInstance.endTime = _endTime;\\n\\n        emit UpdateBattle(operatorAddress, _battleId, _startTime, _endTime);\\n    }\\n\\n    /// @notice function to check the battleStatus i.e true or false\\n    /// @param _battleId its a string\\n    function checkBattleStatus(string memory _battleId) public view returns (bool) {\\n        require(checkBattleExists(_battleId), \\\"WBB: Battle doesn't exists\\\");\\n        return battles[_battleId].status;\\n    }\\n\\n    /// @notice to check the battle Ended or not i.e true or false\\n    /// @param _battleId its a string\\n    function checkBattleEnded(string memory _battleId) public view returns (bool) {\\n        return block.timestamp > battles[_battleId].endTime;\\n    }\\n\\n    /// @notice gives the end time of an battle in unix\\n    /// @param _battleId which is in string format\\n    function getBattlePeriod(string memory _battleId) public view returns (uint256 startTime, uint256 endTime) {\\n        return (battles[_battleId].startTime, battles[_battleId].endTime);\\n    }\\n\\n    /// @notice return the last created battle\\n    function getLatestBattle() public view returns (string memory battleId) {\\n        return battleList[battleList.length - 1];\\n    }\\n\\n    /// @notice return the list of all bosses\\n    function getAllBattle() public view returns (string[] memory) {\\n        return battleList;\\n    }\\n\\n    /*\\n        ---------------------------------\\n        \\u2554\\u2557 \\u250c\\u2500\\u2510\\u250c\\u2500\\u2510\\u250c\\u2500\\u2510  \\u2554\\u2550\\u2557\\u250c\\u2500\\u2510\\u250c\\u252c\\u2510\\u252c\\u250c\\u2500\\u2510\\u250c\\u2510\\u250c\\u250c\\u2500\\u2510\\n        \\u2560\\u2569\\u2557\\u2502 \\u2502\\u2514\\u2500\\u2510\\u2514\\u2500\\u2510  \\u2560\\u2550\\u2563\\u2502   \\u2502 \\u2502\\u2502 \\u2502\\u2502\\u2502\\u2502\\u2514\\u2500\\u2510\\n        \\u255a\\u2550\\u255d\\u2514\\u2500\\u2518\\u2514\\u2500\\u2518\\u2514\\u2500\\u2518  \\u2569 \\u2569\\u2514\\u2500\\u2518 \\u2534 \\u2534\\u2514\\u2500\\u2518\\u2518\\u2514\\u2518\\u2514\\u2500\\u2518\\n        ---------------------------------\\n    */\\n\\n    function checkBossExists(string memory _bossId) public view returns (bool) {\\n        if (bossList.length > 0) {\\n            string[] memory allBossList = bossList;\\n            for (uint256 i = 0; i < allBossList.length;) {\\n                if (keccak256(abi.encodePacked(allBossList[i])) == keccak256(abi.encodePacked(_bossId))) return true;\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function setBossStatus(string memory _bossId, bool _status) external {\\n        require(accessControls.isAuthorized(msg.sender), \\\"WBB: Unauthorized to update boss status\\\");\\n        require(checkBossExists(_bossId), \\\"WBB: Boss doesn't exist\\\");\\n        Boss storage bossInstance = bosses[_bossId];\\n        bossInstance.status = _status;\\n    }\\n\\n    /// @notice checks the boss is available or not\\n    /// @param _bossId is should be given as parameter\\n    function checkActiveBosses(string[] memory _bossId) public view {\\n        for (uint i = 0; i < _bossId.length; i++) {\\n            require(checkBossStatus(_bossId[i]), \\\"WBB: boss not created\\\");\\n        }\\n    }\\n\\n    /// @notice checks the boss is available or not\\n    /// @param _bossId is should be given as parameter\\n    function checkBossStatus(string memory _bossId) public view returns (bool) {\\n        return bosses[_bossId].status;\\n    }\\n\\n    /**\\n     * @notice Method to create a new boss.\\n     * @param bossId which is a string and identify boss,\\n     * @param name which is name of string,\\n     * @param maxHp is uint that have boss health and\\n     * @param uri is a string\\n     */\\n    function createBoss(string memory bossId, string memory name, uint256 maxHp, string memory uri) public {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.isAuthorized(operatorAddress), \\\"WBB: Unauthorized to create boss\\\");\\n        require(!checkBossExists(bossId), \\\"WBB: Boss already Exists\\\");\\n\\n        Boss storage bossInstance = bosses[bossId];\\n\\n        bossInstance.bossId = bossId;\\n        bossInstance.name = name;\\n        bossInstance.maxHp = maxHp;\\n        bossInstance.uri = uri;\\n        bossInstance.status = true;\\n        bossList.push(bossId);\\n        bossInstance.index = bossList.length - 1;\\n        emit CreateBoss(operatorAddress, bossId, name, maxHp, uri);\\n    }\\n\\n    /**\\n     * @notice function to update the boss character\\n     * @param bossId which is a string and identify boss,\\n     * @param name which is name of string,\\n     * @param maxHp is uint that have boss health and\\n     * @param uri is a string\\n     */\\n    function updateBoss(string memory bossId, string memory name, uint256 maxHp, string memory uri) public {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.isAuthorized(operatorAddress), \\\"WBB: Unauthorized to update boss\\\");\\n        require(checkBossExists(bossId), \\\"WBB: Boss doesn't exist\\\");\\n\\n        Boss storage bossInstance = bosses[bossId];\\n        require(!bossInstance.status, \\\"WBB: Boss is active\\\");\\n\\n        bossInstance.bossId = bossId;\\n        bossInstance.name = name;\\n        bossInstance.maxHp = maxHp;\\n        bossInstance.uri = uri;\\n\\n        bossList.push(bossId);\\n        emit UpdateBoss(operatorAddress, bossId, name, maxHp, uri);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf8ae2adbc0a66e3f09c05deb0a9def883aadfcfed2a4019cbfe720496b78d357\",\"license\":\"MIT\"},\"contracts/game/WBBActionsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./WBBActions.sol\\\";\\n\\ncontract WBBActionsV2 is WBBActions {\\n    function reInitialize() public reinitializer(2) {}\\n\\n    /// @notice return the list of all bosses\\n    function getAllBosses() public view returns (string[] memory) {\\n        return bossList;\\n    }\\n}\\n\",\"keccak256\":\"0xc23a5e20dd25e0a1d37f6b589dfa759c76454c91e92de3f7979d1109569d4072\",\"license\":\"MIT\"},\"contracts/game/WBBData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/// @title Battle related actions and datastructures\\n/// @notice you can use this contract for only creating and updating boss and battle\\ncontract WBBData {\\n\\n    event CreateBattle(address indexed _operatorAddress, string _battleId, string[] _bossIds, uint256 _startTime, uint256 _endTime);\\n    event UpdateBattle(address indexed _operatorAddress, string _battleId, uint256 _startTime, uint256 _endTime);\\n    event DisableBattle(string _battleId, bool _status);\\n    event EnableBattle(string _battleId, bool _status);\\n    event CreateBoss(address indexed _operatorAddress, string _bossId, string _name, uint256 _maxHp, string _uri);\\n    event UpdateBoss(address indexed _operatorAddress, string _bossId, string _name, uint256 _maxHp, string _uri);\\n\\n    /** @notice Data structure to store the information of a battle.\\n     *  @field battleId The unique identifier for the battle.\\n     *  @field bossIds The unique identifier for the bosses in the battle.\\n     *  @field bossCount The number of bosses in the battle.\\n     *  @field startTime The time at which the battle starts (in Unix timestamp format).\\n     *  @field endTime The time at which the battle ends (in Unix timestamp format).\\n     *  @field status The current status of the battle (true for enabled, false for disabled).\\n     *  @field index An internal index used to keep track of the battle.\\n     */\\n    struct Battle {\\n        string battleId;\\n        string[] bossIds;\\n        uint256 bossCount;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool status;\\n        uint index;\\n    }\\n\\n    /**\\n     * @notice Data structure to store the information of a boss.\\n     * @field bossId The unique identifier for the boss.\\n     * @field name The name of the boss.\\n     * @field maxHp The maximum hit points of the boss.\\n     * @field uri The URI where more information about the boss can be found.\\n     * @field status The current status of the boss (true for enabled, false for disabled).\\n     * @field index An internal index used to keep track of the boss.\\n     */\\n    struct Boss {\\n        string bossId;\\n        string name;\\n        uint256 maxHp;\\n        string uri;\\n        bool status;\\n        uint256 index;\\n    }\\n\\n    /// @notice Mapping of battle data, where the key is the battle's identifier and the value is the battle's data structure.\\n    mapping(string => Battle) public battles;\\n\\n    /// @notice An array of all the battle identifiers that have been created.\\n    string[] public battleList;\\n\\n    /// @notice Mapping of boss data, where the key is the boss's identifier and the value is the boss's data structure.\\n    mapping(string => Boss) public bosses;\\n\\n    /// @notice An array of all the boss identifiers that have been created.\\n    string[] public bossList;\\n}\\n\",\"keccak256\":\"0x32a80fb40ceb1c0b76b1e00ab1b68d065651e8514f92cb3668434224160c5f7e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6129be80620000f46000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806377bb7b78116100e3578063ac0d46461161008c578063c2451bdc11610066578063c2451bdc14610382578063c4d66de814610395578063e59f94b7146103a857600080fd5b8063ac0d46461461035f578063b24a97c314610372578063bf81ee6d1461037a57600080fd5b80638abf3a0e116100bd5780638abf3a0e14610314578063a07418d614610339578063a83e54c21461034c57600080fd5b806377bb7b78146102c95780637e4fceaf146102ee578063856515741461030157600080fd5b806340e8e1851161014557806356b1bc9a1161011f57806356b1bc9a1461025c5780635d49778914610271578063748365ef1461028457600080fd5b806340e8e1851461021357806347ff16ac146102265780634fa1290d1461024957600080fd5b806325eeb4f51161017657806325eeb4f5146101d05780632de23337146101e357806332165c3c146101eb57600080fd5b8063159a9239146101925780631bc143a5146101a7575b600080fd5b6101a56101a03660046121a2565b6103bb565b005b6101ba6101b5366004612234565b610685565b6040516101c791906122bb565b60405180910390f35b6101ba6101de366004612234565b610731565b6101a5610741565b6101fe6101f93660046122d5565b61087b565b604080519283526020830191909152016101c7565b6101a56102213660046123b1565b6108cb565b6102396102343660046122d5565b610975565b60405190151581526020016101c7565b6101a56102573660046121a2565b6109a2565b610264610c2a565b6040516101c7919061243b565b61023961027f3660046122d5565b610d03565b6037546102a49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c7565b6102dc6102d73660046122d5565b610da0565b6040516101c79695949392919061244e565b6101a56102fc36600461249d565b610e6c565b61023961030f3660046122d5565b611051565b6103276103223660046122d5565b61107f565b6040516101c7969594939291906124ef565b6101a5610347366004612544565b61125a565b6101a561035a36600461249d565b6115c7565b61023961036d3660046122d5565b6117ac565b610264611922565b6101ba6119f2565b6101a56103903660046125b8565b611aae565b6101a56103a3366004612606565b611d61565b6102396103b63660046122d5565b611f2b565b6037546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482018190529173ffffffffffffffffffffffffffffffffffffffff169063fe9fbb8090602401602060405180830381865afa15801561042a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044e919061263c565b6104b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5742423a20556e617574686f72697a656420746f2075706461746520626f737360448201526064015b60405180910390fd5b6104c285611f2b565b610528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a20426f737320646f65736e277420657869737400000000000000000060448201526064016104b0565b600060358660405161053a9190612659565b908152604051908190036020019020600481015490915060ff16156105bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5742423a20426f7373206973206163746976650000000000000000000000000060448201526064016104b0565b806105c68782612717565b50600181016105d58682612717565b5060028101849055600381016105eb8482612717565b50603680546001810182556000919091527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8016106288782612717565b508173ffffffffffffffffffffffffffffffffffffffff167fe84e5250e15f8fc9c44338f80b627457e114179c263f3707ff9beeed895f8ca4878787876040516106759493929190612831565b60405180910390a2505050505050565b6034818154811061069557600080fd5b9060005260206000200160009150905080546106b090612675565b80601f01602080910402602001604051908101604052809291908181526020018280546106dc90612675565b80156107295780601f106106fe57610100808354040283529160200191610729565b820191906000526020600020905b81548152906001019060200180831161070c57829003601f168201915b505050505081565b6036818154811061069557600080fd5b600054600290610100900460ff16158015610763575060005460ff8083169116105b6107ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104b0565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660ff8316908117610100177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b60008060338360405161088e9190612659565b9081526020016040518091039020600301546033846040516108b09190612659565b90815260200160405180910390206004015491509150915091565b60005b8151811015610971576108f98282815181106108ec576108ec61287b565b6020026020010151611051565b61095f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5742423a20626f7373206e6f742063726561746564000000000000000000000060448201526064016104b0565b80610969816128d9565b9150506108ce565b5050565b60006033826040516109879190612659565b90815260200160405180910390206004015442119050919050565b6037546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482018190529173ffffffffffffffffffffffffffffffffffffffff169063fe9fbb8090602401602060405180830381865afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a35919061263c565b610a9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5742423a20556e617574686f72697a656420746f2063726561746520626f737360448201526064016104b0565b610aa485611f2b565b15610b0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5742423a20426f737320616c726561647920457869737473000000000000000060448201526064016104b0565b6000603586604051610b1d9190612659565b908152604051908190036020019020905080610b398782612717565b5060018101610b488682612717565b506002810184905560038101610b5e8482612717565b506004810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556036805491820181556000527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b801610bc78782612717565b50603654610bd790600190612911565b600582015560405173ffffffffffffffffffffffffffffffffffffffff8316907f7d51e5ba65a244038915d444c0ca607e0b05121999d92bf11349864f8ec00bc090610675908990899089908990612831565b60606036805480602002602001604051908101604052809291908181526020016000905b82821015610cfa578382906000526020600020018054610c6d90612675565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9990612675565b8015610ce65780601f10610cbb57610100808354040283529160200191610ce6565b820191906000526020600020905b815481529060010190602001808311610cc957829003601f168201915b505050505081526020019060010190610c4e565b50505050905090565b6000610d0e826117ac565b610d74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5742423a20426174746c6520646f65736e27742065786973747300000000000060448201526064016104b0565b603382604051610d849190612659565b9081526040519081900360200190206005015460ff1692915050565b8051602081830181018051603382529282019190930120915280548190610dc690612675565b80601f0160208091040260200160405190810160405280929190818152602001828054610df290612675565b8015610e3f5780601f10610e1457610100808354040283529160200191610e3f565b820191906000526020600020905b815481529060010190602001808311610e2257829003601f168201915b505050506002830154600384015460048501546005860154600690960154949592949193509160ff169086565b6037546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe919061263c565b610f8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f5742423a20556e617574686f72697a656420746f2075706461746520626f737360448201527f207374617475730000000000000000000000000000000000000000000000000060648201526084016104b0565b610f9382611f2b565b610ff9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a20426f737320646f65736e277420657869737400000000000000000060448201526064016104b0565b600060358360405161100b9190612659565b90815260405190819003602001902060040180549215157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909316929092179091555050565b60006035826040516110639190612659565b9081526040519081900360200190206004015460ff1692915050565b80516020818301810180516035825292820191909301209152805481906110a590612675565b80601f01602080910402602001604051908101604052809291908181526020018280546110d190612675565b801561111e5780601f106110f35761010080835404028352916020019161111e565b820191906000526020600020905b81548152906001019060200180831161110157829003601f168201915b50505050509080600101805461113390612675565b80601f016020809104026020016040519081016040528092919081815260200182805461115f90612675565b80156111ac5780601f10611181576101008083540402835291602001916111ac565b820191906000526020600020905b81548152906001019060200180831161118f57829003601f168201915b5050505050908060020154908060030180546111c790612675565b80601f01602080910402602001604051908101604052809291908181526020018280546111f390612675565b80156112405780601f1061121557610100808354040283529160200191611240565b820191906000526020600020905b81548152906001019060200180831161122357829003601f168201915b505050506004830154600590930154919260ff1691905086565b6037546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482018190529173ffffffffffffffffffffffffffffffffffffffff169063fe9fbb8090602401602060405180830381865afa1580156112c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ed919061263c565b611379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f5742423a20556e617574686f72697a656420746f20637265617465206261747460448201527f6c6500000000000000000000000000000000000000000000000000000000000060648201526084016104b0565b611382856117ac565b156113e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5742423a20426174746c6520616c72656164792045786973747300000000000060448201526064016104b0565b828211611452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5742423a20696e76616c696420626174746c6520706572696f6400000000000060448201526064016104b0565b61145b846108cb565b600060338660405161146d9190612659565b9081526040519081900360200190209050806114898782612717565b5060038101849055600481018390556005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155855160028301556034805491820181556000527f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c1016115078782612717565b5060345461151790600190612911565b600682015560005b855181101561157a578160010186828151811061153e5761153e61287b565b602090810291909101810151825460018101845560009384529190922001906115679082612717565b5080611572816128d9565b91505061151f565b508173ffffffffffffffffffffffffffffffffffffffff167fbf930b6a4190ef0d2e18f5890bf0a9d9cadbdb0806e46cdf21ac172ca43f76a687878787604051610675949392919061292a565b6037546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa158015611635573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611659919061263c565b6116e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f5742423a20556e617574686f72697a656420746f2073657420626174746c652060448201527f737461747573000000000000000000000000000000000000000000000000000060648201526084016104b0565b6116ee826117ac565b611754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5742423a20426174746c6520646f65736e27742065786973740000000000000060448201526064016104b0565b60006033836040516117669190612659565b90815260405190819003602001902060050180549215157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909316929092179091555050565b6034546000901561191a5760006034805480602002602001604051908101604052809291908181526020016000905b828210156118875783829060005260206000200180546117fa90612675565b80601f016020809104026020016040519081016040528092919081815260200182805461182690612675565b80156118735780601f1061184857610100808354040283529160200191611873565b820191906000526020600020905b81548152906001019060200180831161185657829003601f168201915b5050505050815260200190600101906117db565b50505050905060005b815181101561191757836040516020016118aa9190612659565b604051602081830303815290604052805190602001208282815181106118d2576118d261287b565b60200260200101516040516020016118ea9190612659565b604051602081830303815290604052805190602001200361190f575060019392505050565b600101611890565b50505b506000919050565b60606034805480602002602001604051908101604052809291908181526020016000905b82821015610cfa57838290600052602060002001805461196590612675565b80601f016020809104026020016040519081016040528092919081815260200182805461199190612675565b80156119de5780601f106119b3576101008083540402835291602001916119de565b820191906000526020600020905b8154815290600101906020018083116119c157829003601f168201915b505050505081526020019060010190611946565b6034805460609190611a0690600190612911565b81548110611a1657611a1661287b565b906000526020600020018054611a2b90612675565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5790612675565b8015611aa45780601f10611a7957610100808354040283529160200191611aa4565b820191906000526020600020905b815481529060010190602001808311611a8757829003601f168201915b5050505050905090565b6037546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482018190529173ffffffffffffffffffffffffffffffffffffffff169063fe9fbb8090602401602060405180830381865afa158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b41919061263c565b611bcd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f5742423a20556e617574686f72697a656420746f20757064617465206261747460448201527f6c6500000000000000000000000000000000000000000000000000000000000060648201526084016104b0565b611bd6846117ac565b611c3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5742423a20426174746c6520646f65736e27742065786973747300000000000060448201526064016104b0565b603384604051611c4c9190612659565b9081526040519081900360200190206005015460ff1615611cc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5742423a20426174746c6520697320616374697665000000000000000000000060448201526064016104b0565b6000603385604051611cdb9190612659565b908152604051908190036020019020905080611cf78682612717565b50600381018490556004810183905560405173ffffffffffffffffffffffffffffffffffffffff8316907f48af9efa0eb42768b8561a4d6eb892763a3701ff2fae21c37d480825f78f6cbc90611d5290889088908890612963565b60405180910390a25050505050565b600054610100900460ff1615808015611d815750600054600160ff909116105b80611d9b5750303b158015611d9b575060005460ff166001145b611e27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104b0565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015611e8557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b603780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055801561097157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6036546000901561191a5760006036805480602002602001604051908101604052809291908181526020016000905b82821015612006578382906000526020600020018054611f7990612675565b80601f0160208091040260200160405190810160405280929190818152602001828054611fa590612675565b8015611ff25780601f10611fc757610100808354040283529160200191611ff2565b820191906000526020600020905b815481529060010190602001808311611fd557829003601f168201915b505050505081526020019060010190611f5a565b50505050905060005b815181101561191757836040516020016120299190612659565b604051602081830303815290604052805190602001208282815181106120515761205161287b565b60200260200101516040516020016120699190612659565b604051602081830303815290604052805190602001200361208e575060019392505050565b60010161200f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561210c5761210c612096565b604052919050565b600082601f83011261212557600080fd5b813567ffffffffffffffff81111561213f5761213f612096565b61217060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016120c5565b81815284602083860101111561218557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156121b857600080fd5b843567ffffffffffffffff808211156121d057600080fd5b6121dc88838901612114565b955060208701359150808211156121f257600080fd5b6121fe88838901612114565b945060408701359350606087013591508082111561221b57600080fd5b5061222887828801612114565b91505092959194509250565b60006020828403121561224657600080fd5b5035919050565b60005b83811015612268578181015183820152602001612250565b50506000910152565b6000815180845261228981602086016020860161224d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006122ce6020830184612271565b9392505050565b6000602082840312156122e757600080fd5b813567ffffffffffffffff8111156122fe57600080fd5b61230a84828501612114565b949350505050565b600082601f83011261232357600080fd5b8135602067ffffffffffffffff8083111561234057612340612096565b8260051b61234f8382016120c5565b938452858101830193838101908886111561236957600080fd5b84880192505b858310156123a5578235848111156123875760008081fd5b6123958a87838c0101612114565b835250918401919084019061236f565b98975050505050505050565b6000602082840312156123c357600080fd5b813567ffffffffffffffff8111156123da57600080fd5b61230a84828501612312565b600081518084526020808501808196508360051b8101915082860160005b8581101561242e57828403895261241c848351612271565b98850198935090840190600101612404565b5091979650505050505050565b6020815260006122ce60208301846123e6565b60c08152600061246160c0830189612271565b602083019790975250604081019490945260608401929092521515608083015260a090910152919050565b801515811461249a57600080fd5b50565b600080604083850312156124b057600080fd5b823567ffffffffffffffff8111156124c757600080fd5b6124d385828601612114565b92505060208301356124e48161248c565b809150509250929050565b60c08152600061250260c0830189612271565b82810360208401526125148189612271565b9050866040840152828103606084015261252e8187612271565b9415156080840152505060a00152949350505050565b6000806000806080858703121561255a57600080fd5b843567ffffffffffffffff8082111561257257600080fd5b61257e88838901612114565b9550602087013591508082111561259457600080fd5b506125a187828801612312565b949794965050505060408301359260600135919050565b6000806000606084860312156125cd57600080fd5b833567ffffffffffffffff8111156125e457600080fd5b6125f086828701612114565b9660208601359650604090950135949350505050565b60006020828403121561261857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146122ce57600080fd5b60006020828403121561264e57600080fd5b81516122ce8161248c565b6000825161266b81846020870161224d565b9190910192915050565b600181811c9082168061268957607f821691505b6020821081036126c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561271257600081815260208120601f850160051c810160208610156126ef5750805b601f850160051c820191505b8181101561270e578281556001016126fb565b5050505b505050565b815167ffffffffffffffff81111561273157612731612096565b6127458161273f8454612675565b846126c8565b602080601f83116001811461279857600084156127625750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561270e565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156127e5578886015182559484019460019091019084016127c6565b508582101561282157878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6080815260006128446080830187612271565b82810360208401526128568187612271565b905084604084015282810360608401526128708185612271565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361290a5761290a6128aa565b5060010190565b81810381811115612924576129246128aa565b92915050565b60808152600061293d6080830187612271565b828103602084015261294f81876123e6565b604084019590955250506060015292915050565b6060815260006129766060830186612271565b6020830194909452506040015291905056fea2646970667358221220d2246205a35c9af4d5e03de15c9d7ab81ec793f6589ae0f6b97f419e37fa39ef64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c806377bb7b78116100e3578063ac0d46461161008c578063c2451bdc11610066578063c2451bdc14610382578063c4d66de814610395578063e59f94b7146103a857600080fd5b8063ac0d46461461035f578063b24a97c314610372578063bf81ee6d1461037a57600080fd5b80638abf3a0e116100bd5780638abf3a0e14610314578063a07418d614610339578063a83e54c21461034c57600080fd5b806377bb7b78146102c95780637e4fceaf146102ee578063856515741461030157600080fd5b806340e8e1851161014557806356b1bc9a1161011f57806356b1bc9a1461025c5780635d49778914610271578063748365ef1461028457600080fd5b806340e8e1851461021357806347ff16ac146102265780634fa1290d1461024957600080fd5b806325eeb4f51161017657806325eeb4f5146101d05780632de23337146101e357806332165c3c146101eb57600080fd5b8063159a9239146101925780631bc143a5146101a7575b600080fd5b6101a56101a03660046121a2565b6103bb565b005b6101ba6101b5366004612234565b610685565b6040516101c791906122bb565b60405180910390f35b6101ba6101de366004612234565b610731565b6101a5610741565b6101fe6101f93660046122d5565b61087b565b604080519283526020830191909152016101c7565b6101a56102213660046123b1565b6108cb565b6102396102343660046122d5565b610975565b60405190151581526020016101c7565b6101a56102573660046121a2565b6109a2565b610264610c2a565b6040516101c7919061243b565b61023961027f3660046122d5565b610d03565b6037546102a49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c7565b6102dc6102d73660046122d5565b610da0565b6040516101c79695949392919061244e565b6101a56102fc36600461249d565b610e6c565b61023961030f3660046122d5565b611051565b6103276103223660046122d5565b61107f565b6040516101c7969594939291906124ef565b6101a5610347366004612544565b61125a565b6101a561035a36600461249d565b6115c7565b61023961036d3660046122d5565b6117ac565b610264611922565b6101ba6119f2565b6101a56103903660046125b8565b611aae565b6101a56103a3366004612606565b611d61565b6102396103b63660046122d5565b611f2b565b6037546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482018190529173ffffffffffffffffffffffffffffffffffffffff169063fe9fbb8090602401602060405180830381865afa15801561042a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044e919061263c565b6104b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5742423a20556e617574686f72697a656420746f2075706461746520626f737360448201526064015b60405180910390fd5b6104c285611f2b565b610528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a20426f737320646f65736e277420657869737400000000000000000060448201526064016104b0565b600060358660405161053a9190612659565b908152604051908190036020019020600481015490915060ff16156105bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5742423a20426f7373206973206163746976650000000000000000000000000060448201526064016104b0565b806105c68782612717565b50600181016105d58682612717565b5060028101849055600381016105eb8482612717565b50603680546001810182556000919091527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8016106288782612717565b508173ffffffffffffffffffffffffffffffffffffffff167fe84e5250e15f8fc9c44338f80b627457e114179c263f3707ff9beeed895f8ca4878787876040516106759493929190612831565b60405180910390a2505050505050565b6034818154811061069557600080fd5b9060005260206000200160009150905080546106b090612675565b80601f01602080910402602001604051908101604052809291908181526020018280546106dc90612675565b80156107295780601f106106fe57610100808354040283529160200191610729565b820191906000526020600020905b81548152906001019060200180831161070c57829003601f168201915b505050505081565b6036818154811061069557600080fd5b600054600290610100900460ff16158015610763575060005460ff8083169116105b6107ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104b0565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660ff8316908117610100177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b60008060338360405161088e9190612659565b9081526020016040518091039020600301546033846040516108b09190612659565b90815260200160405180910390206004015491509150915091565b60005b8151811015610971576108f98282815181106108ec576108ec61287b565b6020026020010151611051565b61095f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5742423a20626f7373206e6f742063726561746564000000000000000000000060448201526064016104b0565b80610969816128d9565b9150506108ce565b5050565b60006033826040516109879190612659565b90815260200160405180910390206004015442119050919050565b6037546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482018190529173ffffffffffffffffffffffffffffffffffffffff169063fe9fbb8090602401602060405180830381865afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a35919061263c565b610a9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5742423a20556e617574686f72697a656420746f2063726561746520626f737360448201526064016104b0565b610aa485611f2b565b15610b0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5742423a20426f737320616c726561647920457869737473000000000000000060448201526064016104b0565b6000603586604051610b1d9190612659565b908152604051908190036020019020905080610b398782612717565b5060018101610b488682612717565b506002810184905560038101610b5e8482612717565b506004810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556036805491820181556000527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b801610bc78782612717565b50603654610bd790600190612911565b600582015560405173ffffffffffffffffffffffffffffffffffffffff8316907f7d51e5ba65a244038915d444c0ca607e0b05121999d92bf11349864f8ec00bc090610675908990899089908990612831565b60606036805480602002602001604051908101604052809291908181526020016000905b82821015610cfa578382906000526020600020018054610c6d90612675565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9990612675565b8015610ce65780601f10610cbb57610100808354040283529160200191610ce6565b820191906000526020600020905b815481529060010190602001808311610cc957829003601f168201915b505050505081526020019060010190610c4e565b50505050905090565b6000610d0e826117ac565b610d74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5742423a20426174746c6520646f65736e27742065786973747300000000000060448201526064016104b0565b603382604051610d849190612659565b9081526040519081900360200190206005015460ff1692915050565b8051602081830181018051603382529282019190930120915280548190610dc690612675565b80601f0160208091040260200160405190810160405280929190818152602001828054610df290612675565b8015610e3f5780601f10610e1457610100808354040283529160200191610e3f565b820191906000526020600020905b815481529060010190602001808311610e2257829003601f168201915b505050506002830154600384015460048501546005860154600690960154949592949193509160ff169086565b6037546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe919061263c565b610f8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f5742423a20556e617574686f72697a656420746f2075706461746520626f737360448201527f207374617475730000000000000000000000000000000000000000000000000060648201526084016104b0565b610f9382611f2b565b610ff9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a20426f737320646f65736e277420657869737400000000000000000060448201526064016104b0565b600060358360405161100b9190612659565b90815260405190819003602001902060040180549215157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909316929092179091555050565b60006035826040516110639190612659565b9081526040519081900360200190206004015460ff1692915050565b80516020818301810180516035825292820191909301209152805481906110a590612675565b80601f01602080910402602001604051908101604052809291908181526020018280546110d190612675565b801561111e5780601f106110f35761010080835404028352916020019161111e565b820191906000526020600020905b81548152906001019060200180831161110157829003601f168201915b50505050509080600101805461113390612675565b80601f016020809104026020016040519081016040528092919081815260200182805461115f90612675565b80156111ac5780601f10611181576101008083540402835291602001916111ac565b820191906000526020600020905b81548152906001019060200180831161118f57829003601f168201915b5050505050908060020154908060030180546111c790612675565b80601f01602080910402602001604051908101604052809291908181526020018280546111f390612675565b80156112405780601f1061121557610100808354040283529160200191611240565b820191906000526020600020905b81548152906001019060200180831161122357829003601f168201915b505050506004830154600590930154919260ff1691905086565b6037546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482018190529173ffffffffffffffffffffffffffffffffffffffff169063fe9fbb8090602401602060405180830381865afa1580156112c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ed919061263c565b611379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f5742423a20556e617574686f72697a656420746f20637265617465206261747460448201527f6c6500000000000000000000000000000000000000000000000000000000000060648201526084016104b0565b611382856117ac565b156113e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5742423a20426174746c6520616c72656164792045786973747300000000000060448201526064016104b0565b828211611452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5742423a20696e76616c696420626174746c6520706572696f6400000000000060448201526064016104b0565b61145b846108cb565b600060338660405161146d9190612659565b9081526040519081900360200190209050806114898782612717565b5060038101849055600481018390556005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155855160028301556034805491820181556000527f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c1016115078782612717565b5060345461151790600190612911565b600682015560005b855181101561157a578160010186828151811061153e5761153e61287b565b602090810291909101810151825460018101845560009384529190922001906115679082612717565b5080611572816128d9565b91505061151f565b508173ffffffffffffffffffffffffffffffffffffffff167fbf930b6a4190ef0d2e18f5890bf0a9d9cadbdb0806e46cdf21ac172ca43f76a687878787604051610675949392919061292a565b6037546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063fe9fbb8090602401602060405180830381865afa158015611635573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611659919061263c565b6116e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f5742423a20556e617574686f72697a656420746f2073657420626174746c652060448201527f737461747573000000000000000000000000000000000000000000000000000060648201526084016104b0565b6116ee826117ac565b611754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5742423a20426174746c6520646f65736e27742065786973740000000000000060448201526064016104b0565b60006033836040516117669190612659565b90815260405190819003602001902060050180549215157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909316929092179091555050565b6034546000901561191a5760006034805480602002602001604051908101604052809291908181526020016000905b828210156118875783829060005260206000200180546117fa90612675565b80601f016020809104026020016040519081016040528092919081815260200182805461182690612675565b80156118735780601f1061184857610100808354040283529160200191611873565b820191906000526020600020905b81548152906001019060200180831161185657829003601f168201915b5050505050815260200190600101906117db565b50505050905060005b815181101561191757836040516020016118aa9190612659565b604051602081830303815290604052805190602001208282815181106118d2576118d261287b565b60200260200101516040516020016118ea9190612659565b604051602081830303815290604052805190602001200361190f575060019392505050565b600101611890565b50505b506000919050565b60606034805480602002602001604051908101604052809291908181526020016000905b82821015610cfa57838290600052602060002001805461196590612675565b80601f016020809104026020016040519081016040528092919081815260200182805461199190612675565b80156119de5780601f106119b3576101008083540402835291602001916119de565b820191906000526020600020905b8154815290600101906020018083116119c157829003601f168201915b505050505081526020019060010190611946565b6034805460609190611a0690600190612911565b81548110611a1657611a1661287b565b906000526020600020018054611a2b90612675565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5790612675565b8015611aa45780601f10611a7957610100808354040283529160200191611aa4565b820191906000526020600020905b815481529060010190602001808311611a8757829003601f168201915b5050505050905090565b6037546040517ffe9fbb8000000000000000000000000000000000000000000000000000000000815233600482018190529173ffffffffffffffffffffffffffffffffffffffff169063fe9fbb8090602401602060405180830381865afa158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b41919061263c565b611bcd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f5742423a20556e617574686f72697a656420746f20757064617465206261747460448201527f6c6500000000000000000000000000000000000000000000000000000000000060648201526084016104b0565b611bd6846117ac565b611c3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5742423a20426174746c6520646f65736e27742065786973747300000000000060448201526064016104b0565b603384604051611c4c9190612659565b9081526040519081900360200190206005015460ff1615611cc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5742423a20426174746c6520697320616374697665000000000000000000000060448201526064016104b0565b6000603385604051611cdb9190612659565b908152604051908190036020019020905080611cf78682612717565b50600381018490556004810183905560405173ffffffffffffffffffffffffffffffffffffffff8316907f48af9efa0eb42768b8561a4d6eb892763a3701ff2fae21c37d480825f78f6cbc90611d5290889088908890612963565b60405180910390a25050505050565b600054610100900460ff1615808015611d815750600054600160ff909116105b80611d9b5750303b158015611d9b575060005460ff166001145b611e27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104b0565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015611e8557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b603780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055801561097157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6036546000901561191a5760006036805480602002602001604051908101604052809291908181526020016000905b82821015612006578382906000526020600020018054611f7990612675565b80601f0160208091040260200160405190810160405280929190818152602001828054611fa590612675565b8015611ff25780601f10611fc757610100808354040283529160200191611ff2565b820191906000526020600020905b815481529060010190602001808311611fd557829003601f168201915b505050505081526020019060010190611f5a565b50505050905060005b815181101561191757836040516020016120299190612659565b604051602081830303815290604052805190602001208282815181106120515761205161287b565b60200260200101516040516020016120699190612659565b604051602081830303815290604052805190602001200361208e575060019392505050565b60010161200f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561210c5761210c612096565b604052919050565b600082601f83011261212557600080fd5b813567ffffffffffffffff81111561213f5761213f612096565b61217060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016120c5565b81815284602083860101111561218557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156121b857600080fd5b843567ffffffffffffffff808211156121d057600080fd5b6121dc88838901612114565b955060208701359150808211156121f257600080fd5b6121fe88838901612114565b945060408701359350606087013591508082111561221b57600080fd5b5061222887828801612114565b91505092959194509250565b60006020828403121561224657600080fd5b5035919050565b60005b83811015612268578181015183820152602001612250565b50506000910152565b6000815180845261228981602086016020860161224d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006122ce6020830184612271565b9392505050565b6000602082840312156122e757600080fd5b813567ffffffffffffffff8111156122fe57600080fd5b61230a84828501612114565b949350505050565b600082601f83011261232357600080fd5b8135602067ffffffffffffffff8083111561234057612340612096565b8260051b61234f8382016120c5565b938452858101830193838101908886111561236957600080fd5b84880192505b858310156123a5578235848111156123875760008081fd5b6123958a87838c0101612114565b835250918401919084019061236f565b98975050505050505050565b6000602082840312156123c357600080fd5b813567ffffffffffffffff8111156123da57600080fd5b61230a84828501612312565b600081518084526020808501808196508360051b8101915082860160005b8581101561242e57828403895261241c848351612271565b98850198935090840190600101612404565b5091979650505050505050565b6020815260006122ce60208301846123e6565b60c08152600061246160c0830189612271565b602083019790975250604081019490945260608401929092521515608083015260a090910152919050565b801515811461249a57600080fd5b50565b600080604083850312156124b057600080fd5b823567ffffffffffffffff8111156124c757600080fd5b6124d385828601612114565b92505060208301356124e48161248c565b809150509250929050565b60c08152600061250260c0830189612271565b82810360208401526125148189612271565b9050866040840152828103606084015261252e8187612271565b9415156080840152505060a00152949350505050565b6000806000806080858703121561255a57600080fd5b843567ffffffffffffffff8082111561257257600080fd5b61257e88838901612114565b9550602087013591508082111561259457600080fd5b506125a187828801612312565b949794965050505060408301359260600135919050565b6000806000606084860312156125cd57600080fd5b833567ffffffffffffffff8111156125e457600080fd5b6125f086828701612114565b9660208601359650604090950135949350505050565b60006020828403121561261857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146122ce57600080fd5b60006020828403121561264e57600080fd5b81516122ce8161248c565b6000825161266b81846020870161224d565b9190910192915050565b600181811c9082168061268957607f821691505b6020821081036126c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561271257600081815260208120601f850160051c810160208610156126ef5750805b601f850160051c820191505b8181101561270e578281556001016126fb565b5050505b505050565b815167ffffffffffffffff81111561273157612731612096565b6127458161273f8454612675565b846126c8565b602080601f83116001811461279857600084156127625750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561270e565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156127e5578886015182559484019460019091019084016127c6565b508582101561282157878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6080815260006128446080830187612271565b82810360208401526128568187612271565b905084604084015282810360608401526128708185612271565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361290a5761290a6128aa565b5060010190565b81810381811115612924576129246128aa565b92915050565b60808152600061293d6080830187612271565b828103602084015261294f81876123e6565b604084019590955250506060015292915050565b6060815260006129766060830186612271565b6020830194909452506040015291905056fea2646970667358221220d2246205a35c9af4d5e03de15c9d7ab81ec793f6589ae0f6b97f419e37fa39ef64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkActiveBosses(string[])": {
        "params": {
          "_bossId": "is should be given as parameter"
        }
      },
      "checkBattleEnded(string)": {
        "params": {
          "_battleId": "its a string"
        }
      },
      "checkBattleStatus(string)": {
        "params": {
          "_battleId": "its a string"
        }
      },
      "checkBossStatus(string)": {
        "params": {
          "_bossId": "is should be given as parameter"
        }
      },
      "createBattle(string,string[],uint256,uint256)": {
        "params": {
          "_battleId": "which is a string and identify battles,",
          "_bossIds": "which is an array of string,",
          "_endTime": "are unix timestamp",
          "_startTime": "and"
        }
      },
      "createBoss(string,string,uint256,string)": {
        "params": {
          "bossId": "which is a string and identify boss,",
          "maxHp": "is uint that have boss health and",
          "name": "which is name of string,",
          "uri": "is a string"
        }
      },
      "getBattlePeriod(string)": {
        "params": {
          "_battleId": "which is in string format"
        }
      },
      "updateBattle(string,uint256,uint256)": {
        "params": {
          "_battleId": "which is a string and identify battles,",
          "_endTime": "are unix timestamp",
          "_startTime": "and"
        }
      },
      "updateBoss(string,string,uint256,string)": {
        "params": {
          "bossId": "which is a string and identify boss,",
          "maxHp": "is uint that have boss health and",
          "name": "which is name of string,",
          "uri": "is a string"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "battleList(uint256)": {
        "notice": "An array of all the battle identifiers that have been created."
      },
      "battles(string)": {
        "notice": "Mapping of battle data, where the key is the battle's identifier and the value is the battle's data structure."
      },
      "bossList(uint256)": {
        "notice": "An array of all the boss identifiers that have been created."
      },
      "bosses(string)": {
        "notice": "Mapping of boss data, where the key is the boss's identifier and the value is the boss's data structure."
      },
      "checkActiveBosses(string[])": {
        "notice": "checks the boss is available or not"
      },
      "checkBattleEnded(string)": {
        "notice": "to check the battle Ended or not i.e true or false"
      },
      "checkBattleStatus(string)": {
        "notice": "function to check the battleStatus i.e true or false"
      },
      "checkBossStatus(string)": {
        "notice": "checks the boss is available or not"
      },
      "createBattle(string,string[],uint256,uint256)": {
        "notice": "function to create battle requires battleId and bossId, starting time and ending time"
      },
      "createBoss(string,string,uint256,string)": {
        "notice": "Method to create a new boss."
      },
      "getAllBattle()": {
        "notice": "return the list of all bosses"
      },
      "getAllBosses()": {
        "notice": "return the list of all bosses"
      },
      "getBattlePeriod(string)": {
        "notice": "gives the end time of an battle in unix"
      },
      "getLatestBattle()": {
        "notice": "return the last created battle"
      },
      "updateBattle(string,uint256,uint256)": {
        "notice": "function to update battle requires battleId, bossId, starting time and ending time along with battle status.         Note: 1. Battle should be inactive to be able to update.               2. If battle should be updated with new bosses or updated boss, new battle SHOULD be created"
      },
      "updateBoss(string,string,uint256,string)": {
        "notice": "function to update the boss character"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 547,
        "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 550,
        "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2657,
        "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6892,
        "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
        "label": "battles",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Battle)6873_storage)"
      },
      {
        "astId": 6896,
        "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
        "label": "battleList",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 6902,
        "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
        "label": "bosses",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Boss)6886_storage)"
      },
      {
        "astId": 6906,
        "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
        "label": "bossList",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 6055,
        "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
        "label": "accessControls",
        "offset": 0,
        "slot": "55",
        "type": "t_contract(GameAccessControls)5769"
      }
    ],
    "types": {
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GameAccessControls)5769": {
        "encoding": "inplace",
        "label": "contract GameAccessControls",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Battle)6873_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct WBBData.Battle)",
        "numberOfBytes": "32",
        "value": "t_struct(Battle)6873_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Boss)6886_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct WBBData.Boss)",
        "numberOfBytes": "32",
        "value": "t_struct(Boss)6886_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Battle)6873_storage": {
        "encoding": "inplace",
        "label": "struct WBBData.Battle",
        "members": [
          {
            "astId": 6859,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "battleId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6862,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "bossIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 6864,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "bossCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6866,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6868,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "endTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6870,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "status",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 6872,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "index",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Boss)6886_storage": {
        "encoding": "inplace",
        "label": "struct WBBData.Boss",
        "members": [
          {
            "astId": 6875,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "bossId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6877,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6879,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "maxHp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6881,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "uri",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 6883,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 6885,
            "contract": "contracts/game/WBBActionsV2.sol:WBBActionsV2",
            "label": "index",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}